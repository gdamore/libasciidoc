// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1537},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1565},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1595},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1622},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1658},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1683},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1716},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1743},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1781},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1807},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1820},
			expr: &labeledExpr{
				pos:   position{line: 62, col: 47, offset: 1866},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 62, col: 54, offset: 1873},
					expr: &ruleRefExpr{
						pos:  position{line: 62, col: 55, offset: 1874},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1913},
			expr: &actionExpr{
				pos: position{line: 64, col: 38, offset: 1950},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 64, col: 38, offset: 1950},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 64, col: 38, offset: 1950},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 39, offset: 1951},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1961},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 65, col: 12, offset: 1968},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 65, col: 12, offset: 1968},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1994},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 2047},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2072},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2098},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2121},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2149},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2179},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2207},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2243},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2268},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2301},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2328},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2366},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2392},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 83, col: 1, offset: 2434},
			expr: &labeledExpr{
				pos:   position{line: 83, col: 23, offset: 2456},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 83, col: 30, offset: 2463},
					expr: &ruleRefExpr{
						pos:  position{line: 83, col: 31, offset: 2464},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 85, col: 1, offset: 2487},
			expr: &actionExpr{
				pos: position{line: 85, col: 22, offset: 2508},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 85, col: 22, offset: 2508},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 85, col: 22, offset: 2508},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 23, offset: 2509},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2519},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 86, col: 12, offset: 2526},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 86, col: 12, offset: 2526},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 24, offset: 2538},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 93, col: 1, offset: 2691},
			expr: &ruleRefExpr{
				pos:  position{line: 93, col: 16, offset: 2706},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 95, col: 1, offset: 2726},
			expr: &actionExpr{
				pos: position{line: 95, col: 20, offset: 2745},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 95, col: 20, offset: 2745},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 95, col: 20, offset: 2745},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 41, offset: 2766},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 49, offset: 2774},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 50, offset: 2775},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 75, offset: 2800},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 99, col: 1, offset: 2884},
			expr: &seqExpr{
				pos: position{line: 99, col: 26, offset: 2909},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 99, col: 26, offset: 2909},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 99, col: 32, offset: 2915},
						expr: &ruleRefExpr{
							pos:  position{line: 99, col: 32, offset: 2915},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 39, offset: 2922},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 101, col: 1, offset: 2929},
			expr: &actionExpr{
				pos: position{line: 101, col: 27, offset: 2955},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 101, col: 27, offset: 2955},
					expr: &oneOrMoreExpr{
						pos: position{line: 101, col: 28, offset: 2956},
						expr: &seqExpr{
							pos: position{line: 101, col: 29, offset: 2957},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 29, offset: 2957},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 30, offset: 2958},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 101, col: 51, offset: 2979,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 108, col: 1, offset: 3152},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3170},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3170},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 19, offset: 3170},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 108, col: 23, offset: 3174},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 23, offset: 3174},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 30, offset: 3181},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 3188},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 52, offset: 3203},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 56, offset: 3207},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 56, offset: 3207},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 74, offset: 3225},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3238},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3239},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 10, offset: 3239},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 30, offset: 3259},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3283},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 18, offset: 3292},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 18, offset: 3292},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 9, offset: 3320},
							expr: &choiceExpr{
								pos: position{line: 111, col: 10, offset: 3321},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 111, col: 10, offset: 3321},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 30, offset: 3341},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 9, offset: 3365},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 19, offset: 3375},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3375},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 116, col: 1, offset: 3480},
			expr: &choiceExpr{
				pos: position{line: 116, col: 20, offset: 3499},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 20, offset: 3499},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 48, offset: 3527},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 118, col: 1, offset: 3559},
			expr: &actionExpr{
				pos: position{line: 118, col: 30, offset: 3588},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 30, offset: 3588},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 30, offset: 3588},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 30, offset: 3588},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 118, col: 37, offset: 3595},
							expr: &litMatcher{
								pos:        position{line: 118, col: 38, offset: 3596},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 42, offset: 3600},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 118, col: 51, offset: 3609},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 51, offset: 3609},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 68, offset: 3626},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 122, col: 1, offset: 3700},
			expr: &actionExpr{
				pos: position{line: 122, col: 33, offset: 3732},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 33, offset: 3732},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 33, offset: 3732},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 33, offset: 3732},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 40, offset: 3739},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 51, offset: 3750},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 59, offset: 3758},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 75, offset: 3774},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 126, col: 1, offset: 3857},
			expr: &actionExpr{
				pos: position{line: 126, col: 19, offset: 3875},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 126, col: 19, offset: 3875},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 19, offset: 3875},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 19, offset: 3875},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 26, offset: 3882},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 36, offset: 3892},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 56, offset: 3912},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 62, offset: 3918},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 63, offset: 3919},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 85, offset: 3941},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 85, offset: 3941},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 92, offset: 3948},
							expr: &litMatcher{
								pos:        position{line: 126, col: 92, offset: 3948},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 97, offset: 3953},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 97, offset: 3953},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 131, col: 1, offset: 4103},
			expr: &actionExpr{
				pos: position{line: 131, col: 23, offset: 4125},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 131, col: 23, offset: 4125},
					expr: &charClassMatcher{
						pos:        position{line: 131, col: 23, offset: 4125},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 135, col: 1, offset: 4176},
			expr: &actionExpr{
				pos: position{line: 135, col: 24, offset: 4199},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 135, col: 24, offset: 4199},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 135, col: 24, offset: 4199},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 28, offset: 4203},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 135, col: 35, offset: 4210},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 135, col: 36, offset: 4211},
									expr: &charClassMatcher{
										pos:        position{line: 135, col: 36, offset: 4211},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 4, offset: 4260},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 143, col: 1, offset: 4427},
			expr: &actionExpr{
				pos: position{line: 143, col: 21, offset: 4447},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 143, col: 21, offset: 4447},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 21, offset: 4447},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 21, offset: 4447},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 143, col: 28, offset: 4454},
							expr: &litMatcher{
								pos:        position{line: 143, col: 29, offset: 4455},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 33, offset: 4459},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 144, col: 9, offset: 4479},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 144, col: 10, offset: 4480},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 144, col: 10, offset: 4480},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 10, offset: 4480},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 21, offset: 4491},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 45, offset: 4515},
													expr: &litMatcher{
														pos:        position{line: 144, col: 45, offset: 4515},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 50, offset: 4520},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 58, offset: 4528},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 59, offset: 4529},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 82, offset: 4552},
													expr: &litMatcher{
														pos:        position{line: 144, col: 82, offset: 4552},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 87, offset: 4557},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 97, offset: 4567},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 98, offset: 4568},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 146, col: 15, offset: 4687},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 146, col: 15, offset: 4687},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 146, col: 15, offset: 4687},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 146, col: 24, offset: 4696},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 146, col: 46, offset: 4718},
													expr: &litMatcher{
														pos:        position{line: 146, col: 46, offset: 4718},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 146, col: 51, offset: 4723},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 146, col: 61, offset: 4733},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 62, offset: 4734},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 13, offset: 4845},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 153, col: 1, offset: 4980},
			expr: &choiceExpr{
				pos: position{line: 153, col: 27, offset: 5006},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 27, offset: 5006},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 153, col: 27, offset: 5006},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 27, offset: 5006},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 5011},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 39, offset: 5018},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 39, offset: 5018},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 5068},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 5068},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 5068},
									expr: &litMatcher{
										pos:        position{line: 155, col: 5, offset: 5068},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 155, col: 11, offset: 5074},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 5081},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 5081},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 155, col: 29, offset: 5092},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 29, offset: 5092},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 155, col: 36, offset: 5099},
									expr: &litMatcher{
										pos:        position{line: 155, col: 37, offset: 5100},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 159, col: 1, offset: 5144},
			expr: &actionExpr{
				pos: position{line: 159, col: 25, offset: 5168},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 25, offset: 5168},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 25, offset: 5168},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 163, col: 1, offset: 5218},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5244},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5244},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 27, offset: 5244},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 170, col: 1, offset: 5404},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5428},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 170, col: 25, offset: 5428},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 25, offset: 5428},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 29, offset: 5432},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 35, offset: 5438},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 170, col: 50, offset: 5453},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 9, offset: 5467},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 15, offset: 5473},
								expr: &actionExpr{
									pos: position{line: 171, col: 16, offset: 5474},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 171, col: 17, offset: 5475},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 171, col: 17, offset: 5475},
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5475},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 171, col: 24, offset: 5482},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 31, offset: 5489},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 13, offset: 5565},
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 13, offset: 5565},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 20, offset: 5572},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 180, col: 1, offset: 5819},
			expr: &actionExpr{
				pos: position{line: 180, col: 18, offset: 5836},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 180, col: 18, offset: 5836},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 180, col: 18, offset: 5836},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 28, offset: 5846},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 29, offset: 5847},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 184, col: 1, offset: 5899},
			expr: &actionExpr{
				pos: position{line: 184, col: 30, offset: 5928},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 184, col: 30, offset: 5928},
					expr: &charClassMatcher{
						pos:        position{line: 184, col: 30, offset: 5928},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 188, col: 1, offset: 5977},
			expr: &choiceExpr{
				pos: position{line: 188, col: 19, offset: 5995},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 19, offset: 5995},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 188, col: 19, offset: 5995},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 19, offset: 5995},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 24, offset: 6000},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 30, offset: 6006},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 45, offset: 6021},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 49, offset: 6025},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 49, offset: 6025},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 56, offset: 6032},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 6094},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 6094},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 190, col: 5, offset: 6094},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 190, col: 9, offset: 6098},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 15, offset: 6104},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 190, col: 30, offset: 6119},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 190, col: 35, offset: 6124},
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 35, offset: 6124},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 190, col: 42, offset: 6131},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 194, col: 1, offset: 6194},
			expr: &actionExpr{
				pos: position{line: 194, col: 26, offset: 6219},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 194, col: 26, offset: 6219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 26, offset: 6219},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 30, offset: 6223},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 36, offset: 6229},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 51, offset: 6244},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 198, col: 1, offset: 6314},
			expr: &actionExpr{
				pos: position{line: 198, col: 15, offset: 6328},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 198, col: 15, offset: 6328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 198, col: 15, offset: 6328},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 198, col: 21, offset: 6334},
								expr: &ruleRefExpr{
									pos:  position{line: 198, col: 22, offset: 6335},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 198, col: 41, offset: 6354},
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 41, offset: 6354},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 202, col: 1, offset: 6428},
			expr: &actionExpr{
				pos: position{line: 202, col: 21, offset: 6448},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 21, offset: 6448},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 202, col: 21, offset: 6448},
							expr: &choiceExpr{
								pos: position{line: 202, col: 23, offset: 6450},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 202, col: 23, offset: 6450},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 202, col: 29, offset: 6456},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 202, col: 35, offset: 6462},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 6539},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 203, col: 11, offset: 6545},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 203, col: 11, offset: 6545},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6567},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6592},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6616},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6645},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6674},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6702},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6730},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6768},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6797},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6835},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 218, col: 1, offset: 7023},
			expr: &choiceExpr{
				pos: position{line: 218, col: 24, offset: 7046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 24, offset: 7046},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 42, offset: 7064},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 220, col: 1, offset: 7083},
			expr: &choiceExpr{
				pos: position{line: 220, col: 14, offset: 7096},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 220, col: 14, offset: 7096},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 220, col: 14, offset: 7096},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 220, col: 14, offset: 7096},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 220, col: 19, offset: 7101},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 23, offset: 7105},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 220, col: 27, offset: 7109},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 220, col: 32, offset: 7114},
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 32, offset: 7114},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 220, col: 39, offset: 7121},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 7176},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 222, col: 5, offset: 7176},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 222, col: 5, offset: 7176},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 222, col: 10, offset: 7181},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 14, offset: 7185},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 222, col: 18, offset: 7189},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 222, col: 23, offset: 7194},
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 23, offset: 7194},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 30, offset: 7201},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 226, col: 1, offset: 7257},
			expr: &actionExpr{
				pos: position{line: 226, col: 20, offset: 7276},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 226, col: 20, offset: 7276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 20, offset: 7276},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 7281},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 29, offset: 7285},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 33, offset: 7289},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 226, col: 38, offset: 7294},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 38, offset: 7294},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 232, col: 1, offset: 7577},
			expr: &actionExpr{
				pos: position{line: 232, col: 17, offset: 7593},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 232, col: 17, offset: 7593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 17, offset: 7593},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7597},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 28, offset: 7604},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 49, offset: 7625},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 236, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 236, col: 24, offset: 7710},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 236, col: 24, offset: 7710},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 236, col: 24, offset: 7710},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 32, offset: 7718},
							expr: &charClassMatcher{
								pos:        position{line: 236, col: 32, offset: 7718},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 242, col: 1, offset: 7951},
			expr: &actionExpr{
				pos: position{line: 242, col: 16, offset: 7966},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 242, col: 16, offset: 7966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 16, offset: 7966},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 21, offset: 7971},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 242, col: 27, offset: 7977},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 242, col: 27, offset: 7977},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 242, col: 27, offset: 7977},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 242, col: 36, offset: 7986},
											expr: &charClassMatcher{
												pos:        position{line: 242, col: 36, offset: 7986},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 4, offset: 8035},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 8, offset: 8039},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 8, offset: 8039},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 15, offset: 8046},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 248, col: 1, offset: 8106},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 8126},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 8126},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 21, offset: 8126},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 33, offset: 8138},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 33, offset: 8138},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 40, offset: 8145},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 252, col: 1, offset: 8201},
			expr: &actionExpr{
				pos: position{line: 252, col: 30, offset: 8230},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 252, col: 30, offset: 8230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 30, offset: 8230},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 39, offset: 8239},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 39, offset: 8239},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 46, offset: 8246},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 257, col: 1, offset: 8392},
			expr: &actionExpr{
				pos: position{line: 257, col: 30, offset: 8421},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 257, col: 30, offset: 8421},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 30, offset: 8421},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 34, offset: 8425},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 37, offset: 8428},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 53, offset: 8444},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 57, offset: 8448},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 57, offset: 8448},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 64, offset: 8455},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 262, col: 1, offset: 8615},
			expr: &actionExpr{
				pos: position{line: 262, col: 21, offset: 8635},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 21, offset: 8635},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 21, offset: 8635},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 5, offset: 8651},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 14, offset: 8660},
								expr: &actionExpr{
									pos: position{line: 263, col: 15, offset: 8661},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 263, col: 15, offset: 8661},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 263, col: 15, offset: 8661},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 263, col: 19, offset: 8665},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 263, col: 24, offset: 8670},
													expr: &ruleRefExpr{
														pos:  position{line: 263, col: 25, offset: 8671},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8727},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 264, col: 12, offset: 8734},
								expr: &actionExpr{
									pos: position{line: 264, col: 13, offset: 8735},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 264, col: 13, offset: 8735},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 13, offset: 8735},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 17, offset: 8739},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 22, offset: 8744},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 23, offset: 8745},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 265, col: 5, offset: 8793},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 9, offset: 8797},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 9, offset: 8797},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 16, offset: 8804},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 270, col: 1, offset: 8960},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 8978},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 8978},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 19, offset: 8978},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 23, offset: 8982},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 270, col: 34, offset: 8993},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 35, offset: 8994},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 54, offset: 9013},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 58, offset: 9017},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 58, offset: 9017},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 65, offset: 9024},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 274, col: 1, offset: 9100},
			expr: &choiceExpr{
				pos: position{line: 274, col: 21, offset: 9120},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 274, col: 21, offset: 9120},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 49, offset: 9148},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 276, col: 1, offset: 9180},
			expr: &actionExpr{
				pos: position{line: 276, col: 30, offset: 9209},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 30, offset: 9209},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 276, col: 30, offset: 9209},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 35, offset: 9214},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 49, offset: 9228},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 53, offset: 9232},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 276, col: 59, offset: 9238},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 60, offset: 9239},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 276, col: 77, offset: 9256},
							expr: &litMatcher{
								pos:        position{line: 276, col: 77, offset: 9256},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 82, offset: 9261},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 82, offset: 9261},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 280, col: 1, offset: 9364},
			expr: &actionExpr{
				pos: position{line: 280, col: 33, offset: 9396},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 280, col: 33, offset: 9396},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 280, col: 33, offset: 9396},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 38, offset: 9401},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 52, offset: 9415},
							expr: &litMatcher{
								pos:        position{line: 280, col: 52, offset: 9415},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 280, col: 57, offset: 9420},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 57, offset: 9420},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 284, col: 1, offset: 9512},
			expr: &actionExpr{
				pos: position{line: 284, col: 17, offset: 9528},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 284, col: 17, offset: 9528},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 17, offset: 9528},
							expr: &litMatcher{
								pos:        position{line: 284, col: 18, offset: 9529},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 26, offset: 9537},
							expr: &litMatcher{
								pos:        position{line: 284, col: 27, offset: 9538},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 35, offset: 9546},
							expr: &litMatcher{
								pos:        position{line: 284, col: 36, offset: 9547},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 46, offset: 9557},
							expr: &oneOrMoreExpr{
								pos: position{line: 284, col: 48, offset: 9559},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 48, offset: 9559},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 56, offset: 9567},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 284, col: 61, offset: 9572},
								expr: &charClassMatcher{
									pos:        position{line: 284, col: 61, offset: 9572},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 75, offset: 9586},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 75, offset: 9586},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 288, col: 1, offset: 9633},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9651},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 288, col: 19, offset: 9651},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 288, col: 26, offset: 9658},
						expr: &charClassMatcher{
							pos:        position{line: 288, col: 26, offset: 9658},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 292, col: 1, offset: 9713},
			expr: &actionExpr{
				pos: position{line: 292, col: 29, offset: 9741},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 292, col: 29, offset: 9741},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 292, col: 29, offset: 9741},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 292, col: 36, offset: 9748},
								expr: &charClassMatcher{
									pos:        position{line: 292, col: 36, offset: 9748},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 292, col: 50, offset: 9762},
							expr: &litMatcher{
								pos:        position{line: 292, col: 51, offset: 9763},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 296, col: 1, offset: 9933},
			expr: &actionExpr{
				pos: position{line: 296, col: 21, offset: 9953},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 296, col: 21, offset: 9953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 21, offset: 9953},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 36, offset: 9968},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 36, offset: 9968},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 43, offset: 9975},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 300, col: 1, offset: 10045},
			expr: &actionExpr{
				pos: position{line: 300, col: 20, offset: 10064},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 300, col: 20, offset: 10064},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 300, col: 20, offset: 10064},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 29, offset: 10073},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 29, offset: 10073},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 300, col: 36, offset: 10080},
							expr: &litMatcher{
								pos:        position{line: 300, col: 36, offset: 10080},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 41, offset: 10085},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 48, offset: 10092},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 49, offset: 10093},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 300, col: 66, offset: 10110},
							expr: &litMatcher{
								pos:        position{line: 300, col: 66, offset: 10110},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 71, offset: 10115},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 77, offset: 10121},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 78, offset: 10122},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 300, col: 95, offset: 10139},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 99, offset: 10143},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 99, offset: 10143},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 106, offset: 10150},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 304, col: 1, offset: 10223},
			expr: &actionExpr{
				pos: position{line: 304, col: 20, offset: 10242},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 304, col: 20, offset: 10242},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 20, offset: 10242},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 29, offset: 10251},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 29, offset: 10251},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 36, offset: 10258},
							expr: &litMatcher{
								pos:        position{line: 304, col: 36, offset: 10258},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 41, offset: 10263},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 48, offset: 10270},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 49, offset: 10271},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 66, offset: 10288},
							expr: &litMatcher{
								pos:        position{line: 304, col: 66, offset: 10288},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 71, offset: 10293},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 77, offset: 10299},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 78, offset: 10300},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 304, col: 95, offset: 10317},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 99, offset: 10321},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 99, offset: 10321},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 106, offset: 10328},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 308, col: 1, offset: 10419},
			expr: &actionExpr{
				pos: position{line: 308, col: 19, offset: 10437},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 308, col: 20, offset: 10438},
					expr: &charClassMatcher{
						pos:        position{line: 308, col: 20, offset: 10438},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 312, col: 1, offset: 10491},
			expr: &actionExpr{
				pos: position{line: 312, col: 21, offset: 10511},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 312, col: 21, offset: 10511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 21, offset: 10511},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 25, offset: 10515},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 312, col: 31, offset: 10521},
								expr: &ruleRefExpr{
									pos:  position{line: 312, col: 32, offset: 10522},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 312, col: 51, offset: 10541},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 352, col: 1, offset: 12852},
			expr: &actionExpr{
				pos: position{line: 352, col: 20, offset: 12871},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 352, col: 20, offset: 12871},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 352, col: 27, offset: 12878},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 352, col: 27, offset: 12878},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 352, col: 44, offset: 12895},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 356, col: 1, offset: 12947},
			expr: &actionExpr{
				pos: position{line: 356, col: 23, offset: 12969},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 356, col: 23, offset: 12969},
					expr: &charClassMatcher{
						pos:        position{line: 356, col: 23, offset: 12969},
						val:        "[^\\]]",
						chars:      []rune{']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 359, col: 1, offset: 13041},
			expr: &actionExpr{
				pos: position{line: 359, col: 19, offset: 13059},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 359, col: 19, offset: 13059},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 359, col: 19, offset: 13059},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 359, col: 23, offset: 13063},
							expr: &charClassMatcher{
								pos:        position{line: 359, col: 24, offset: 13064},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 359, col: 29, offset: 13069},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 34, offset: 13074},
								name: "QuotedTextRoleWord",
							},
						},
						&litMatcher{
							pos:        position{line: 359, col: 53, offset: 13093},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 363, col: 1, offset: 13170},
			expr: &actionExpr{
				pos: position{line: 363, col: 24, offset: 13193},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 363, col: 24, offset: 13193},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 363, col: 24, offset: 13193},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 28, offset: 13197},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 363, col: 34, offset: 13203},
								expr: &choiceExpr{
									pos: position{line: 363, col: 36, offset: 13205},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 363, col: 36, offset: 13205},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 363, col: 58, offset: 13227},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 79, offset: 13248},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 367, col: 1, offset: 13283},
			expr: &actionExpr{
				pos: position{line: 367, col: 24, offset: 13306},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 367, col: 24, offset: 13306},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 24, offset: 13306},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 367, col: 28, offset: 13310},
							expr: &charClassMatcher{
								pos:        position{line: 367, col: 28, offset: 13310},
								val:        "[^.#\\]]",
								chars:      []rune{'.', '#', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 371, col: 1, offset: 13380},
			expr: &actionExpr{
				pos: position{line: 371, col: 22, offset: 13401},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 371, col: 22, offset: 13401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 22, offset: 13401},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 371, col: 26, offset: 13405},
							expr: &charClassMatcher{
								pos:        position{line: 371, col: 26, offset: 13405},
								val:        "[^.#\\]]",
								chars:      []rune{'.', '#', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 378, col: 1, offset: 13580},
			expr: &actionExpr{
				pos: position{line: 378, col: 12, offset: 13591},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 378, col: 12, offset: 13591},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 378, col: 12, offset: 13591},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 378, col: 23, offset: 13602},
								expr: &ruleRefExpr{
									pos:  position{line: 378, col: 24, offset: 13603},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 379, col: 5, offset: 13621},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 379, col: 12, offset: 13628},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 379, col: 12, offset: 13628},
									expr: &litMatcher{
										pos:        position{line: 379, col: 13, offset: 13629},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 383, col: 5, offset: 13724},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 387, col: 5, offset: 13880},
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 5, offset: 13880},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 12, offset: 13887},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 19, offset: 13894},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 387, col: 34, offset: 13909},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 387, col: 38, offset: 13913},
								expr: &ruleRefExpr{
									pos:  position{line: 387, col: 38, offset: 13913},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 56, offset: 13931},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 391, col: 1, offset: 14041},
			expr: &actionExpr{
				pos: position{line: 391, col: 18, offset: 14058},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 391, col: 18, offset: 14058},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 391, col: 27, offset: 14067},
						expr: &seqExpr{
							pos: position{line: 391, col: 28, offset: 14068},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 391, col: 28, offset: 14068},
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 29, offset: 14069},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 391, col: 37, offset: 14077},
									expr: &ruleRefExpr{
										pos:  position{line: 391, col: 38, offset: 14078},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 391, col: 54, offset: 14094},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 395, col: 1, offset: 14219},
			expr: &actionExpr{
				pos: position{line: 395, col: 17, offset: 14235},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 395, col: 17, offset: 14235},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 395, col: 26, offset: 14244},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 395, col: 26, offset: 14244},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 14260},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 397, col: 11, offset: 14306},
								expr: &ruleRefExpr{
									pos:  position{line: 397, col: 11, offset: 14306},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 398, col: 11, offset: 14325},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 399, col: 11, offset: 14351},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 400, col: 11, offset: 14380},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 401, col: 11, offset: 14404},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 402, col: 11, offset: 14420},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 403, col: 11, offset: 14446},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 404, col: 11, offset: 14468},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 405, col: 11, offset: 14501},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 412, col: 1, offset: 14659},
			expr: &seqExpr{
				pos: position{line: 412, col: 31, offset: 14689},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 412, col: 31, offset: 14689},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 41, offset: 14699},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 417, col: 1, offset: 14815},
			expr: &actionExpr{
				pos: position{line: 417, col: 19, offset: 14833},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 417, col: 19, offset: 14833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 19, offset: 14833},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 25, offset: 14839},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 40, offset: 14854},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 417, col: 45, offset: 14859},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 52, offset: 14866},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 417, col: 68, offset: 14882},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 75, offset: 14889},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 421, col: 1, offset: 15008},
			expr: &actionExpr{
				pos: position{line: 421, col: 20, offset: 15027},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 421, col: 20, offset: 15027},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 421, col: 20, offset: 15027},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 26, offset: 15033},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 41, offset: 15048},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 45, offset: 15052},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 52, offset: 15059},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 421, col: 68, offset: 15075},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 75, offset: 15082},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 425, col: 1, offset: 15202},
			expr: &actionExpr{
				pos: position{line: 425, col: 18, offset: 15219},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 425, col: 19, offset: 15220},
					expr: &charClassMatcher{
						pos:        position{line: 425, col: 19, offset: 15220},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 429, col: 1, offset: 15273},
			expr: &actionExpr{
				pos: position{line: 429, col: 19, offset: 15291},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 429, col: 19, offset: 15291},
					expr: &charClassMatcher{
						pos:        position{line: 429, col: 19, offset: 15291},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 433, col: 1, offset: 15343},
			expr: &actionExpr{
				pos: position{line: 433, col: 24, offset: 15366},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 433, col: 24, offset: 15366},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 433, col: 24, offset: 15366},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 28, offset: 15370},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 433, col: 34, offset: 15376},
								expr: &ruleRefExpr{
									pos:  position{line: 433, col: 35, offset: 15377},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 433, col: 54, offset: 15396},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 440, col: 1, offset: 15585},
			expr: &actionExpr{
				pos: position{line: 440, col: 18, offset: 15602},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 440, col: 18, offset: 15602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 18, offset: 15602},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 440, col: 24, offset: 15608},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 440, col: 24, offset: 15608},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 440, col: 24, offset: 15608},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 440, col: 36, offset: 15620},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 440, col: 42, offset: 15626},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 440, col: 56, offset: 15640},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 440, col: 74, offset: 15658},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 442, col: 8, offset: 15807},
							expr: &ruleRefExpr{
								pos:  position{line: 442, col: 8, offset: 15807},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 442, col: 15, offset: 15814},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 446, col: 1, offset: 15870},
			expr: &actionExpr{
				pos: position{line: 446, col: 26, offset: 15895},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 446, col: 26, offset: 15895},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 446, col: 26, offset: 15895},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 446, col: 30, offset: 15899},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 446, col: 36, offset: 15905},
								expr: &choiceExpr{
									pos: position{line: 446, col: 37, offset: 15906},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 446, col: 37, offset: 15906},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 446, col: 59, offset: 15928},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 446, col: 80, offset: 15949},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 446, col: 99, offset: 15968},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 450, col: 1, offset: 16044},
			expr: &actionExpr{
				pos: position{line: 450, col: 24, offset: 16067},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 450, col: 24, offset: 16067},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 450, col: 24, offset: 16067},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 450, col: 33, offset: 16076},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 40, offset: 16083},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 450, col: 66, offset: 16109},
							expr: &litMatcher{
								pos:        position{line: 450, col: 66, offset: 16109},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 454, col: 1, offset: 16172},
			expr: &actionExpr{
				pos: position{line: 454, col: 29, offset: 16200},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 454, col: 29, offset: 16200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 454, col: 29, offset: 16200},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 454, col: 36, offset: 16207},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 454, col: 36, offset: 16207},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 455, col: 11, offset: 16325},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 456, col: 11, offset: 16362},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 457, col: 11, offset: 16389},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 458, col: 11, offset: 16422},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 459, col: 11, offset: 16455},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 460, col: 11, offset: 16483},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 460, col: 31, offset: 16503},
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 31, offset: 16503},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 460, col: 39, offset: 16511},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 460, col: 39, offset: 16511},
									expr: &litMatcher{
										pos:        position{line: 460, col: 40, offset: 16512},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 460, col: 46, offset: 16518},
									expr: &litMatcher{
										pos:        position{line: 460, col: 47, offset: 16519},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 464, col: 1, offset: 16555},
			expr: &actionExpr{
				pos: position{line: 464, col: 23, offset: 16577},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 464, col: 23, offset: 16577},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 464, col: 23, offset: 16577},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 464, col: 30, offset: 16584},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 464, col: 30, offset: 16584},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 464, col: 47, offset: 16601},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 16624},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 465, col: 12, offset: 16631},
								expr: &actionExpr{
									pos: position{line: 465, col: 13, offset: 16632},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 465, col: 13, offset: 16632},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 465, col: 13, offset: 16632},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 465, col: 17, offset: 16636},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 465, col: 24, offset: 16643},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 465, col: 24, offset: 16643},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 465, col: 41, offset: 16660},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 471, col: 1, offset: 16804},
			expr: &actionExpr{
				pos: position{line: 471, col: 29, offset: 16832},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 471, col: 29, offset: 16832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 471, col: 29, offset: 16832},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 471, col: 34, offset: 16837},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 471, col: 41, offset: 16844},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 471, col: 41, offset: 16844},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 471, col: 58, offset: 16861},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 16884},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 472, col: 12, offset: 16891},
								expr: &actionExpr{
									pos: position{line: 472, col: 13, offset: 16892},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 472, col: 13, offset: 16892},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 472, col: 13, offset: 16892},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 472, col: 17, offset: 16896},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 472, col: 24, offset: 16903},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 472, col: 24, offset: 16903},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 472, col: 41, offset: 16920},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 474, col: 9, offset: 16975},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 478, col: 1, offset: 17069},
			expr: &actionExpr{
				pos: position{line: 478, col: 19, offset: 17087},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 478, col: 19, offset: 17087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 478, col: 19, offset: 17087},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 26, offset: 17094},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 478, col: 34, offset: 17102},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 478, col: 39, offset: 17107},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 44, offset: 17112},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 482, col: 1, offset: 17204},
			expr: &actionExpr{
				pos: position{line: 482, col: 25, offset: 17228},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 482, col: 25, offset: 17228},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 482, col: 25, offset: 17228},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 30, offset: 17233},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 37, offset: 17240},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 482, col: 45, offset: 17248},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 482, col: 50, offset: 17253},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 55, offset: 17258},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 482, col: 63, offset: 17266},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 486, col: 1, offset: 17355},
			expr: &actionExpr{
				pos: position{line: 486, col: 20, offset: 17374},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 20, offset: 17374},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 486, col: 32, offset: 17386},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 490, col: 1, offset: 17485},
			expr: &actionExpr{
				pos: position{line: 490, col: 26, offset: 17510},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 490, col: 26, offset: 17510},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 490, col: 26, offset: 17510},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 31, offset: 17515},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 43, offset: 17527},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 490, col: 51, offset: 17535},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 494, col: 1, offset: 17631},
			expr: &actionExpr{
				pos: position{line: 494, col: 23, offset: 17653},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 494, col: 23, offset: 17653},
					expr: &charClassMatcher{
						pos:        position{line: 494, col: 23, offset: 17653},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 498, col: 1, offset: 17702},
			expr: &actionExpr{
				pos: position{line: 498, col: 23, offset: 17724},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 498, col: 23, offset: 17724},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 498, col: 24, offset: 17725},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 498, col: 24, offset: 17725},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 498, col: 34, offset: 17735},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 42, offset: 17743},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 48, offset: 17749},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 498, col: 73, offset: 17774},
							expr: &litMatcher{
								pos:        position{line: 498, col: 73, offset: 17774},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 502, col: 1, offset: 17927},
			expr: &actionExpr{
				pos: position{line: 502, col: 28, offset: 17954},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 502, col: 28, offset: 17954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 502, col: 28, offset: 17954},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 35, offset: 17961},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 502, col: 54, offset: 17980},
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 54, offset: 17980},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 502, col: 62, offset: 17988},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 502, col: 62, offset: 17988},
									expr: &litMatcher{
										pos:        position{line: 502, col: 63, offset: 17989},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 502, col: 69, offset: 17995},
									expr: &litMatcher{
										pos:        position{line: 502, col: 70, offset: 17996},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 506, col: 1, offset: 18032},
			expr: &actionExpr{
				pos: position{line: 506, col: 22, offset: 18053},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 506, col: 22, offset: 18053},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 506, col: 22, offset: 18053},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 29, offset: 18060},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 507, col: 5, offset: 18075},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 507, col: 12, offset: 18082},
								expr: &actionExpr{
									pos: position{line: 507, col: 13, offset: 18083},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 507, col: 13, offset: 18083},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 507, col: 13, offset: 18083},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 507, col: 17, offset: 18087},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 507, col: 24, offset: 18094},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 513, col: 1, offset: 18231},
			expr: &choiceExpr{
				pos: position{line: 513, col: 13, offset: 18243},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 513, col: 13, offset: 18243},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 513, col: 13, offset: 18243},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 513, col: 18, offset: 18248},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 513, col: 18, offset: 18248},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 513, col: 30, offset: 18260},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 515, col: 5, offset: 18330},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 515, col: 5, offset: 18330},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 515, col: 5, offset: 18330},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 515, col: 9, offset: 18334},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 515, col: 14, offset: 18339},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 515, col: 14, offset: 18339},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 515, col: 26, offset: 18351},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 519, col: 1, offset: 18423},
			expr: &actionExpr{
				pos: position{line: 519, col: 16, offset: 18438},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 519, col: 16, offset: 18438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 519, col: 16, offset: 18438},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 519, col: 23, offset: 18445},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 519, col: 23, offset: 18445},
									expr: &litMatcher{
										pos:        position{line: 519, col: 24, offset: 18446},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 522, col: 5, offset: 18503},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 530, col: 1, offset: 18753},
			expr: &zeroOrMoreExpr{
				pos: position{line: 530, col: 24, offset: 18776},
				expr: &choiceExpr{
					pos: position{line: 530, col: 25, offset: 18777},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 530, col: 25, offset: 18777},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 41, offset: 18793},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 532, col: 1, offset: 18815},
			expr: &actionExpr{
				pos: position{line: 532, col: 21, offset: 18835},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 532, col: 21, offset: 18835},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 532, col: 21, offset: 18835},
							expr: &ruleRefExpr{
								pos:  position{line: 532, col: 22, offset: 18836},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 532, col: 26, offset: 18840},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 532, col: 35, offset: 18849},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 532, col: 35, offset: 18849},
									expr: &charClassMatcher{
										pos:        position{line: 532, col: 35, offset: 18849},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 534, col: 12, offset: 18913},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 541, col: 1, offset: 19119},
			expr: &actionExpr{
				pos: position{line: 541, col: 21, offset: 19139},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 541, col: 21, offset: 19139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 541, col: 21, offset: 19139},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 541, col: 29, offset: 19147},
								expr: &choiceExpr{
									pos: position{line: 541, col: 30, offset: 19148},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 541, col: 30, offset: 19148},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 541, col: 53, offset: 19171},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 541, col: 74, offset: 19192},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 541, col: 74, offset: 19192,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 541, col: 107, offset: 19225},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 545, col: 1, offset: 19300},
			expr: &actionExpr{
				pos: position{line: 545, col: 25, offset: 19324},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 545, col: 25, offset: 19324},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 545, col: 25, offset: 19324},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 545, col: 33, offset: 19332},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 545, col: 38, offset: 19337},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 38, offset: 19337},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 545, col: 78, offset: 19377},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 549, col: 1, offset: 19446},
			expr: &actionExpr{
				pos: position{line: 549, col: 23, offset: 19468},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 549, col: 23, offset: 19468},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 549, col: 23, offset: 19468},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 549, col: 31, offset: 19476},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 549, col: 36, offset: 19481},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 549, col: 36, offset: 19481},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 549, col: 76, offset: 19521},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 556, col: 1, offset: 19692},
			expr: &choiceExpr{
				pos: position{line: 556, col: 18, offset: 19709},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 556, col: 18, offset: 19709},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 556, col: 18, offset: 19709},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 27, offset: 19718},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 558, col: 9, offset: 19777},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 558, col: 9, offset: 19777},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 558, col: 15, offset: 19783},
								expr: &ruleRefExpr{
									pos:  position{line: 558, col: 16, offset: 19784},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 562, col: 1, offset: 19880},
			expr: &actionExpr{
				pos: position{line: 562, col: 22, offset: 19901},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 562, col: 22, offset: 19901},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 562, col: 22, offset: 19901},
							expr: &ruleRefExpr{
								pos:  position{line: 562, col: 23, offset: 19902},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 563, col: 5, offset: 19911},
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 6, offset: 19912},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 564, col: 5, offset: 19928},
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 6, offset: 19929},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 565, col: 5, offset: 19952},
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 6, offset: 19953},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 566, col: 5, offset: 19980},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 6, offset: 19981},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 567, col: 5, offset: 20010},
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 6, offset: 20011},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 568, col: 5, offset: 20038},
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 6, offset: 20039},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 569, col: 5, offset: 20065},
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 6, offset: 20066},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 570, col: 5, offset: 20088},
							expr: &ruleRefExpr{
								pos:  position{line: 570, col: 6, offset: 20089},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 571, col: 5, offset: 20109},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 6, offset: 20110},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 5, offset: 20138},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 572, col: 11, offset: 20144},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 572, col: 11, offset: 20144},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 572, col: 20, offset: 20153},
										expr: &ruleRefExpr{
											pos:  position{line: 572, col: 21, offset: 20154},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 574, col: 12, offset: 20255},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 578, col: 1, offset: 20298},
			expr: &seqExpr{
				pos: position{line: 578, col: 25, offset: 20322},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 578, col: 25, offset: 20322},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 578, col: 29, offset: 20326},
						expr: &ruleRefExpr{
							pos:  position{line: 578, col: 29, offset: 20326},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 578, col: 36, offset: 20333},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 580, col: 1, offset: 20407},
			expr: &actionExpr{
				pos: position{line: 580, col: 29, offset: 20435},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 580, col: 29, offset: 20435},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 580, col: 29, offset: 20435},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 580, col: 50, offset: 20456},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 580, col: 58, offset: 20464},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 584, col: 1, offset: 20574},
			expr: &actionExpr{
				pos: position{line: 584, col: 29, offset: 20602},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 584, col: 29, offset: 20602},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 584, col: 29, offset: 20602},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 30, offset: 20603},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 585, col: 5, offset: 20613},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 585, col: 14, offset: 20622},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 585, col: 14, offset: 20622},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 11, offset: 20648},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 587, col: 11, offset: 20673},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 588, col: 11, offset: 20728},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 589, col: 11, offset: 20751},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 590, col: 11, offset: 20779},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 591, col: 11, offset: 20809},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 593, col: 11, offset: 20876},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 594, col: 11, offset: 20928},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 595, col: 11, offset: 20953},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 596, col: 11, offset: 20986},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 597, col: 11, offset: 21013},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 598, col: 11, offset: 21051},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 599, col: 11, offset: 21077},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 606, col: 1, offset: 21247},
			expr: &actionExpr{
				pos: position{line: 606, col: 20, offset: 21266},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 606, col: 20, offset: 21266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 20, offset: 21266},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 606, col: 31, offset: 21277},
								expr: &ruleRefExpr{
									pos:  position{line: 606, col: 32, offset: 21278},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 45, offset: 21291},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 53, offset: 21299},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 76, offset: 21322},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 85, offset: 21331},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 610, col: 1, offset: 21475},
			expr: &actionExpr{
				pos: position{line: 611, col: 5, offset: 21506},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 611, col: 5, offset: 21506},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 611, col: 5, offset: 21506},
							expr: &ruleRefExpr{
								pos:  position{line: 611, col: 5, offset: 21506},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 611, col: 12, offset: 21513},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 613, col: 9, offset: 21578},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 613, col: 9, offset: 21578},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 613, col: 9, offset: 21578},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 613, col: 9, offset: 21578},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 613, col: 16, offset: 21585},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 613, col: 16, offset: 21585},
															expr: &litMatcher{
																pos:        position{line: 613, col: 17, offset: 21586},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 617, col: 9, offset: 21690},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 636, col: 11, offset: 22426},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 636, col: 11, offset: 22426},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 636, col: 11, offset: 22426},
													expr: &charClassMatcher{
														pos:        position{line: 636, col: 12, offset: 22427},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 636, col: 20, offset: 22435},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 638, col: 13, offset: 22548},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 638, col: 13, offset: 22548},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 638, col: 14, offset: 22549},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 638, col: 21, offset: 22556},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 640, col: 13, offset: 22672},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 640, col: 13, offset: 22672},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 640, col: 14, offset: 22673},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 640, col: 21, offset: 22680},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 642, col: 13, offset: 22796},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 642, col: 13, offset: 22796},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 642, col: 13, offset: 22796},
													expr: &charClassMatcher{
														pos:        position{line: 642, col: 14, offset: 22797},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 642, col: 22, offset: 22805},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 644, col: 13, offset: 22921},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 644, col: 13, offset: 22921},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 644, col: 13, offset: 22921},
													expr: &charClassMatcher{
														pos:        position{line: 644, col: 14, offset: 22922},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 644, col: 22, offset: 22930},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 646, col: 12, offset: 23045},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 12, offset: 23045},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 650, col: 1, offset: 23084},
			expr: &actionExpr{
				pos: position{line: 650, col: 27, offset: 23110},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 650, col: 27, offset: 23110},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 650, col: 37, offset: 23120},
						expr: &ruleRefExpr{
							pos:  position{line: 650, col: 37, offset: 23120},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 657, col: 1, offset: 23327},
			expr: &actionExpr{
				pos: position{line: 657, col: 22, offset: 23348},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 657, col: 22, offset: 23348},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 657, col: 22, offset: 23348},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 657, col: 33, offset: 23359},
								expr: &ruleRefExpr{
									pos:  position{line: 657, col: 34, offset: 23360},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 47, offset: 23373},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 55, offset: 23381},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 80, offset: 23406},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 657, col: 91, offset: 23417},
								expr: &ruleRefExpr{
									pos:  position{line: 657, col: 92, offset: 23418},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 122, offset: 23448},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 131, offset: 23457},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 661, col: 1, offset: 23619},
			expr: &actionExpr{
				pos: position{line: 662, col: 5, offset: 23652},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 662, col: 5, offset: 23652},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 662, col: 5, offset: 23652},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 5, offset: 23652},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 12, offset: 23659},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 662, col: 20, offset: 23667},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 664, col: 9, offset: 23726},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 664, col: 9, offset: 23726},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 664, col: 9, offset: 23726},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 664, col: 16, offset: 23733},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 664, col: 16, offset: 23733},
															expr: &litMatcher{
																pos:        position{line: 664, col: 17, offset: 23734},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 668, col: 9, offset: 23838},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 685, col: 14, offset: 24562},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 685, col: 21, offset: 24569},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 685, col: 22, offset: 24570},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 687, col: 13, offset: 24658},
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 13, offset: 24658},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 691, col: 1, offset: 24698},
			expr: &actionExpr{
				pos: position{line: 691, col: 32, offset: 24729},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 691, col: 32, offset: 24729},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 691, col: 32, offset: 24729},
							expr: &litMatcher{
								pos:        position{line: 691, col: 33, offset: 24730},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 37, offset: 24734},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 692, col: 7, offset: 24749},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 692, col: 7, offset: 24749},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 692, col: 7, offset: 24749},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 693, col: 7, offset: 24795},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 693, col: 7, offset: 24795},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 694, col: 7, offset: 24839},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 694, col: 7, offset: 24839},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 695, col: 7, offset: 24882},
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 7, offset: 24882},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 699, col: 1, offset: 24928},
			expr: &actionExpr{
				pos: position{line: 699, col: 29, offset: 24956},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 699, col: 29, offset: 24956},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 699, col: 39, offset: 24966},
						expr: &ruleRefExpr{
							pos:  position{line: 699, col: 39, offset: 24966},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 706, col: 1, offset: 25289},
			expr: &actionExpr{
				pos: position{line: 706, col: 20, offset: 25308},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 706, col: 20, offset: 25308},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 706, col: 20, offset: 25308},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 706, col: 31, offset: 25319},
								expr: &ruleRefExpr{
									pos:  position{line: 706, col: 32, offset: 25320},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 45, offset: 25333},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 51, offset: 25339},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 80, offset: 25368},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 91, offset: 25379},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 117, offset: 25405},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 706, col: 129, offset: 25417},
								expr: &ruleRefExpr{
									pos:  position{line: 706, col: 130, offset: 25418},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 710, col: 1, offset: 25568},
			expr: &seqExpr{
				pos: position{line: 710, col: 26, offset: 25593},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 710, col: 26, offset: 25593},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 710, col: 54, offset: 25621},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 712, col: 1, offset: 25649},
			expr: &actionExpr{
				pos: position{line: 712, col: 32, offset: 25680},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 712, col: 32, offset: 25680},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 712, col: 41, offset: 25689},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 712, col: 41, offset: 25689},
							expr: &charClassMatcher{
								pos:        position{line: 712, col: 41, offset: 25689},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 718, col: 1, offset: 25829},
			expr: &actionExpr{
				pos: position{line: 718, col: 24, offset: 25852},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 718, col: 24, offset: 25852},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 718, col: 33, offset: 25861},
						expr: &seqExpr{
							pos: position{line: 718, col: 34, offset: 25862},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 718, col: 34, offset: 25862},
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 35, offset: 25863},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 718, col: 43, offset: 25871},
									expr: &litMatcher{
										pos:        position{line: 718, col: 44, offset: 25872},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 718, col: 49, offset: 25877},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 722, col: 1, offset: 26008},
			expr: &actionExpr{
				pos: position{line: 722, col: 31, offset: 26038},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 722, col: 31, offset: 26038},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 722, col: 40, offset: 26047},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 722, col: 40, offset: 26047},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 723, col: 11, offset: 26063},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 724, col: 11, offset: 26113},
								expr: &ruleRefExpr{
									pos:  position{line: 724, col: 11, offset: 26113},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 725, col: 11, offset: 26132},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 726, col: 11, offset: 26158},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 727, col: 11, offset: 26188},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 728, col: 11, offset: 26209},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 729, col: 11, offset: 26238},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 730, col: 11, offset: 26262},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 731, col: 11, offset: 26278},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 732, col: 11, offset: 26304},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 733, col: 11, offset: 26326},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 734, col: 11, offset: 26359},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 738, col: 1, offset: 26402},
			expr: &actionExpr{
				pos: position{line: 739, col: 5, offset: 26436},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 739, col: 5, offset: 26436},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 5, offset: 26436},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 739, col: 16, offset: 26447},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 739, col: 16, offset: 26447},
									expr: &litMatcher{
										pos:        position{line: 739, col: 17, offset: 26448},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 742, col: 5, offset: 26509},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 746, col: 6, offset: 26689},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 746, col: 6, offset: 26689},
									expr: &choiceExpr{
										pos: position{line: 746, col: 7, offset: 26690},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 746, col: 7, offset: 26690},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 746, col: 15, offset: 26698},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 746, col: 27, offset: 26710},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 750, col: 1, offset: 26754},
			expr: &actionExpr{
				pos: position{line: 750, col: 31, offset: 26784},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 750, col: 31, offset: 26784},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 750, col: 40, offset: 26793},
						expr: &ruleRefExpr{
							pos:  position{line: 750, col: 41, offset: 26794},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 757, col: 1, offset: 26992},
			expr: &choiceExpr{
				pos: position{line: 757, col: 19, offset: 27010},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 757, col: 19, offset: 27010},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 757, col: 19, offset: 27010},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 759, col: 9, offset: 27058},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 759, col: 9, offset: 27058},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 761, col: 9, offset: 27108},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 761, col: 9, offset: 27108},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 9, offset: 27168},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 763, col: 9, offset: 27168},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 765, col: 9, offset: 27224},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 765, col: 9, offset: 27224},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 774, col: 1, offset: 27540},
			expr: &choiceExpr{
				pos: position{line: 776, col: 5, offset: 27589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 776, col: 5, offset: 27589},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 776, col: 5, offset: 27589},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 776, col: 5, offset: 27589},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 776, col: 16, offset: 27600},
										expr: &ruleRefExpr{
											pos:  position{line: 776, col: 17, offset: 27601},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 776, col: 30, offset: 27614},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 776, col: 33, offset: 27617},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 776, col: 49, offset: 27633},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 776, col: 54, offset: 27638},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 776, col: 60, offset: 27644},
										expr: &ruleRefExpr{
											pos:  position{line: 776, col: 61, offset: 27645},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 780, col: 5, offset: 27830},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 780, col: 5, offset: 27830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 780, col: 5, offset: 27830},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 780, col: 16, offset: 27841},
										expr: &ruleRefExpr{
											pos:  position{line: 780, col: 17, offset: 27842},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 780, col: 30, offset: 27855},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 780, col: 35, offset: 27860},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 780, col: 44, offset: 27869},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 784, col: 5, offset: 28068},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 784, col: 5, offset: 28068},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 784, col: 5, offset: 28068},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 784, col: 16, offset: 28079},
										expr: &ruleRefExpr{
											pos:  position{line: 784, col: 17, offset: 28080},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 784, col: 30, offset: 28093},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 791, col: 7, offset: 28379},
									expr: &ruleRefExpr{
										pos:  position{line: 791, col: 8, offset: 28380},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 791, col: 23, offset: 28395},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 791, col: 32, offset: 28404},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 28605},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 795, col: 5, offset: 28605},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 795, col: 5, offset: 28605},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 795, col: 16, offset: 28616},
										expr: &ruleRefExpr{
											pos:  position{line: 795, col: 17, offset: 28617},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 795, col: 30, offset: 28630},
									expr: &ruleRefExpr{
										pos:  position{line: 795, col: 31, offset: 28631},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 795, col: 46, offset: 28646},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 795, col: 52, offset: 28652},
										expr: &ruleRefExpr{
											pos:  position{line: 795, col: 53, offset: 28653},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 799, col: 1, offset: 28753},
			expr: &oneOrMoreExpr{
				pos: position{line: 799, col: 38, offset: 28790},
				expr: &actionExpr{
					pos: position{line: 799, col: 39, offset: 28791},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 799, col: 39, offset: 28791},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 799, col: 39, offset: 28791},
								expr: &ruleRefExpr{
									pos:  position{line: 799, col: 40, offset: 28792},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 799, col: 50, offset: 28802},
								expr: &litMatcher{
									pos:        position{line: 799, col: 50, offset: 28802},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 799, col: 56, offset: 28808},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 799, col: 65, offset: 28817},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 803, col: 1, offset: 28962},
			expr: &actionExpr{
				pos: position{line: 803, col: 34, offset: 28995},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 803, col: 34, offset: 28995},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 803, col: 34, offset: 28995},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 803, col: 40, offset: 29001},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 803, col: 48, offset: 29009},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 803, col: 49, offset: 29010},
									expr: &charClassMatcher{
										pos:        position{line: 803, col: 49, offset: 29010},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 805, col: 8, offset: 29062},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 809, col: 1, offset: 29098},
			expr: &oneOrMoreExpr{
				pos: position{line: 809, col: 36, offset: 29133},
				expr: &actionExpr{
					pos: position{line: 809, col: 37, offset: 29134},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 809, col: 37, offset: 29134},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 809, col: 37, offset: 29134},
								expr: &ruleRefExpr{
									pos:  position{line: 809, col: 38, offset: 29135},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 809, col: 48, offset: 29145},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 809, col: 57, offset: 29154},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 814, col: 1, offset: 29372},
			expr: &actionExpr{
				pos: position{line: 814, col: 20, offset: 29391},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 814, col: 20, offset: 29391},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 814, col: 20, offset: 29391},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 814, col: 31, offset: 29402},
								expr: &ruleRefExpr{
									pos:  position{line: 814, col: 32, offset: 29403},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 815, col: 5, offset: 29422},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 823, col: 5, offset: 29716},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 823, col: 16, offset: 29727},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 824, col: 5, offset: 29751},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 824, col: 16, offset: 29762},
								expr: &ruleRefExpr{
									pos:  position{line: 824, col: 17, offset: 29763},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 828, col: 1, offset: 29901},
			expr: &actionExpr{
				pos: position{line: 829, col: 5, offset: 29929},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 829, col: 5, offset: 29929},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 829, col: 5, offset: 29929},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 829, col: 15, offset: 29939},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 829, col: 15, offset: 29939},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 829, col: 20, offset: 29944},
										expr: &ruleRefExpr{
											pos:  position{line: 829, col: 20, offset: 29944},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 36, offset: 29960},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 833, col: 1, offset: 30035},
			expr: &actionExpr{
				pos: position{line: 833, col: 23, offset: 30057},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 833, col: 23, offset: 30057},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 833, col: 33, offset: 30067},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 838, col: 1, offset: 30192},
			expr: &choiceExpr{
				pos: position{line: 840, col: 5, offset: 30250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 840, col: 5, offset: 30250},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 840, col: 5, offset: 30250},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 840, col: 5, offset: 30250},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 840, col: 16, offset: 30261},
										expr: &ruleRefExpr{
											pos:  position{line: 840, col: 17, offset: 30262},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 840, col: 30, offset: 30275},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 33, offset: 30278},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 840, col: 49, offset: 30294},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 840, col: 54, offset: 30299},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 840, col: 61, offset: 30306},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 30510},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 30510},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 844, col: 5, offset: 30510},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 844, col: 16, offset: 30521},
										expr: &ruleRefExpr{
											pos:  position{line: 844, col: 17, offset: 30522},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 844, col: 30, offset: 30535},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 844, col: 37, offset: 30542},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 848, col: 1, offset: 30647},
			expr: &actionExpr{
				pos: position{line: 848, col: 28, offset: 30674},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 848, col: 28, offset: 30674},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 848, col: 28, offset: 30674},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 848, col: 39, offset: 30685},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 848, col: 59, offset: 30705},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 848, col: 70, offset: 30716},
								expr: &seqExpr{
									pos: position{line: 848, col: 71, offset: 30717},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 848, col: 71, offset: 30717},
											expr: &ruleRefExpr{
												pos:  position{line: 848, col: 72, offset: 30718},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 848, col: 93, offset: 30739},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 852, col: 1, offset: 30849},
			expr: &choiceExpr{
				pos: position{line: 854, col: 5, offset: 30903},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 854, col: 5, offset: 30903},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 854, col: 5, offset: 30903},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 854, col: 5, offset: 30903},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 854, col: 16, offset: 30914},
										expr: &ruleRefExpr{
											pos:  position{line: 854, col: 17, offset: 30915},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 855, col: 5, offset: 30933},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 862, col: 5, offset: 31145},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 8, offset: 31148},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 862, col: 24, offset: 31164},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 862, col: 29, offset: 31169},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 862, col: 35, offset: 31175},
										expr: &ruleRefExpr{
											pos:  position{line: 862, col: 36, offset: 31176},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 866, col: 5, offset: 31372},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 866, col: 5, offset: 31372},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 866, col: 5, offset: 31372},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 866, col: 16, offset: 31383},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 17, offset: 31384},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 867, col: 5, offset: 31402},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 874, col: 5, offset: 31614},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 874, col: 11, offset: 31620},
										expr: &ruleRefExpr{
											pos:  position{line: 874, col: 12, offset: 31621},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 878, col: 1, offset: 31726},
			expr: &actionExpr{
				pos: position{line: 878, col: 19, offset: 31744},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 878, col: 19, offset: 31744},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 878, col: 19, offset: 31744},
							expr: &ruleRefExpr{
								pos:  position{line: 878, col: 20, offset: 31745},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 5, offset: 31760},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 879, col: 15, offset: 31770},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 879, col: 15, offset: 31770},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 879, col: 15, offset: 31770},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 879, col: 24, offset: 31779},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 881, col: 9, offset: 31873},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 881, col: 9, offset: 31873},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 881, col: 9, offset: 31873},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 881, col: 18, offset: 31882},
														expr: &ruleRefExpr{
															pos:  position{line: 881, col: 19, offset: 31883},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 881, col: 35, offset: 31899},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 887, col: 1, offset: 32022},
			expr: &actionExpr{
				pos: position{line: 888, col: 5, offset: 32046},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 888, col: 5, offset: 32046},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 888, col: 14, offset: 32055},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 888, col: 14, offset: 32055},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 889, col: 11, offset: 32107},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 890, col: 11, offset: 32153},
								expr: &ruleRefExpr{
									pos:  position{line: 890, col: 11, offset: 32153},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 891, col: 11, offset: 32172},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 891, col: 11, offset: 32172},
										expr: &ruleRefExpr{
											pos:  position{line: 891, col: 12, offset: 32173},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 892, col: 13, offset: 32193},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 892, col: 13, offset: 32193},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 893, col: 15, offset: 32220},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 894, col: 15, offset: 32248},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 895, col: 15, offset: 32269},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 896, col: 15, offset: 32303},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 897, col: 15, offset: 32334},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 898, col: 15, offset: 32365},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 899, col: 15, offset: 32397},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 900, col: 15, offset: 32435},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 901, col: 15, offset: 32466},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 902, col: 15, offset: 32500},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 903, col: 15, offset: 32525},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 910, col: 1, offset: 32755},
			expr: &actionExpr{
				pos: position{line: 910, col: 14, offset: 32768},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 910, col: 14, offset: 32768},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 910, col: 14, offset: 32768},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 910, col: 20, offset: 32774},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 910, col: 24, offset: 32778},
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 24, offset: 32778},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 910, col: 31, offset: 32785},
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 32, offset: 32786},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 917, col: 1, offset: 33077},
			expr: &choiceExpr{
				pos: position{line: 917, col: 15, offset: 33091},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 917, col: 15, offset: 33091},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 41, offset: 33117},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 917, col: 65, offset: 33141},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 919, col: 1, offset: 33162},
			expr: &choiceExpr{
				pos: position{line: 919, col: 32, offset: 33193},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 919, col: 32, offset: 33193},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 919, col: 32, offset: 33193},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 919, col: 36, offset: 33197},
								expr: &litMatcher{
									pos:        position{line: 919, col: 37, offset: 33198},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 919, col: 43, offset: 33204},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 919, col: 43, offset: 33204},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 919, col: 47, offset: 33208},
								expr: &litMatcher{
									pos:        position{line: 919, col: 48, offset: 33209},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 919, col: 54, offset: 33215},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 919, col: 54, offset: 33215},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 919, col: 58, offset: 33219},
								expr: &litMatcher{
									pos:        position{line: 919, col: 59, offset: 33220},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 921, col: 1, offset: 33228},
			expr: &choiceExpr{
				pos: position{line: 921, col: 34, offset: 33261},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 921, col: 34, offset: 33261},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 921, col: 41, offset: 33268},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 921, col: 48, offset: 33275},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 921, col: 55, offset: 33282},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 921, col: 61, offset: 33288},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 923, col: 1, offset: 33295},
			expr: &actionExpr{
				pos: position{line: 923, col: 26, offset: 33320},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 923, col: 26, offset: 33320},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 923, col: 32, offset: 33326},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 923, col: 32, offset: 33326},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 15, offset: 33362},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 925, col: 15, offset: 33400},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 926, col: 15, offset: 33441},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 15, offset: 33471},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 15, offset: 33503},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 932, col: 1, offset: 33661},
			expr: &choiceExpr{
				pos: position{line: 932, col: 28, offset: 33688},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 932, col: 28, offset: 33688},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 933, col: 15, offset: 33723},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 934, col: 15, offset: 33760},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 936, col: 1, offset: 33788},
			expr: &choiceExpr{
				pos: position{line: 936, col: 22, offset: 33809},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 936, col: 22, offset: 33809},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 937, col: 15, offset: 33841},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 15, offset: 33875},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 939, col: 15, offset: 33912},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 940, col: 15, offset: 33949},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 942, col: 1, offset: 33975},
			expr: &choiceExpr{
				pos: position{line: 942, col: 33, offset: 34007},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 942, col: 33, offset: 34007},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 942, col: 39, offset: 34013},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 942, col: 39, offset: 34013},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 946, col: 1, offset: 34150},
			expr: &actionExpr{
				pos: position{line: 946, col: 25, offset: 34174},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 946, col: 25, offset: 34174},
					expr: &litMatcher{
						pos:        position{line: 946, col: 25, offset: 34174},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 950, col: 1, offset: 34219},
			expr: &actionExpr{
				pos: position{line: 950, col: 25, offset: 34243},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 950, col: 25, offset: 34243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 950, col: 25, offset: 34243},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 950, col: 30, offset: 34248},
							expr: &litMatcher{
								pos:        position{line: 950, col: 30, offset: 34248},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 958, col: 1, offset: 34353},
			expr: &choiceExpr{
				pos: position{line: 958, col: 13, offset: 34365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 958, col: 13, offset: 34365},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 35, offset: 34387},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 960, col: 1, offset: 34456},
			expr: &actionExpr{
				pos: position{line: 960, col: 24, offset: 34479},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 960, col: 24, offset: 34479},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 960, col: 24, offset: 34479},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 960, col: 30, offset: 34485},
								expr: &ruleRefExpr{
									pos:  position{line: 960, col: 31, offset: 34486},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 960, col: 49, offset: 34504},
							expr: &litMatcher{
								pos:        position{line: 960, col: 50, offset: 34505},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 960, col: 55, offset: 34510},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 960, col: 60, offset: 34515},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 70, offset: 34525},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 960, col: 99, offset: 34554},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 964, col: 1, offset: 34645},
			expr: &seqExpr{
				pos: position{line: 964, col: 32, offset: 34676},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 964, col: 32, offset: 34676},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 964, col: 59, offset: 34703},
						expr: &seqExpr{
							pos: position{line: 964, col: 60, offset: 34704},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 964, col: 60, offset: 34704},
									expr: &litMatcher{
										pos:        position{line: 964, col: 62, offset: 34706},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 964, col: 69, offset: 34713},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 964, col: 69, offset: 34713},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 964, col: 77, offset: 34721},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 966, col: 1, offset: 34788},
			expr: &choiceExpr{
				pos: position{line: 966, col: 31, offset: 34818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 966, col: 31, offset: 34818},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 967, col: 11, offset: 34835},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 11, offset: 34867},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 11, offset: 34890},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 11, offset: 34915},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 11, offset: 34940},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 11, offset: 34967},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 11, offset: 34991},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 11, offset: 35008},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 11, offset: 35038},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 976, col: 11, offset: 35071},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 11, offset: 35115},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 980, col: 1, offset: 35157},
			expr: &actionExpr{
				pos: position{line: 980, col: 37, offset: 35193},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 980, col: 37, offset: 35193},
					expr: &seqExpr{
						pos: position{line: 980, col: 38, offset: 35194},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 980, col: 38, offset: 35194},
								expr: &litMatcher{
									pos:        position{line: 980, col: 39, offset: 35195},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 980, col: 44, offset: 35200},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 984, col: 1, offset: 35275},
			expr: &choiceExpr{
				pos: position{line: 985, col: 5, offset: 35321},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 985, col: 5, offset: 35321},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 986, col: 7, offset: 35419},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 986, col: 7, offset: 35419},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 986, col: 7, offset: 35419},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 986, col: 12, offset: 35424},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 990, col: 1, offset: 35591},
			expr: &choiceExpr{
				pos: position{line: 990, col: 24, offset: 35614},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 990, col: 24, offset: 35614},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 990, col: 24, offset: 35614},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 990, col: 24, offset: 35614},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 990, col: 30, offset: 35620},
										expr: &ruleRefExpr{
											pos:  position{line: 990, col: 31, offset: 35621},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 990, col: 50, offset: 35640},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 990, col: 50, offset: 35640},
											expr: &litMatcher{
												pos:        position{line: 990, col: 51, offset: 35641},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 990, col: 55, offset: 35645},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 990, col: 59, offset: 35649},
											expr: &litMatcher{
												pos:        position{line: 990, col: 60, offset: 35650},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 990, col: 65, offset: 35655},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 990, col: 75, offset: 35665},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 990, col: 104, offset: 35694},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 990, col: 108, offset: 35698},
									expr: &notExpr{
										pos: position{line: 990, col: 110, offset: 35700},
										expr: &ruleRefExpr{
											pos:  position{line: 990, col: 111, offset: 35701},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 35897},
						run: (*parser).callonSingleQuoteBoldText19,
						expr: &seqExpr{
							pos: position{line: 992, col: 5, offset: 35897},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 992, col: 5, offset: 35897},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 992, col: 11, offset: 35903},
										expr: &ruleRefExpr{
											pos:  position{line: 992, col: 12, offset: 35904},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 992, col: 30, offset: 35922},
									expr: &litMatcher{
										pos:        position{line: 992, col: 31, offset: 35923},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 992, col: 36, offset: 35928},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 992, col: 40, offset: 35932},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 992, col: 50, offset: 35942},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 992, col: 50, offset: 35942},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 54, offset: 35946},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 992, col: 83, offset: 35975},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 996, col: 1, offset: 36185},
			expr: &seqExpr{
				pos: position{line: 996, col: 32, offset: 36216},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 996, col: 32, offset: 36216},
						expr: &ruleRefExpr{
							pos:  position{line: 996, col: 33, offset: 36217},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 996, col: 39, offset: 36223},
						expr: &ruleRefExpr{
							pos:  position{line: 996, col: 39, offset: 36223},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 998, col: 1, offset: 36254},
			expr: &choiceExpr{
				pos: position{line: 998, col: 31, offset: 36284},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 31, offset: 36284},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 11, offset: 36301},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 1000, col: 11, offset: 36332},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1000, col: 11, offset: 36332},
								expr: &ruleRefExpr{
									pos:  position{line: 1000, col: 11, offset: 36332},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1000, col: 18, offset: 36339},
								expr: &seqExpr{
									pos: position{line: 1000, col: 19, offset: 36340},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1000, col: 19, offset: 36340},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1000, col: 23, offset: 36344},
											expr: &litMatcher{
												pos:        position{line: 1000, col: 24, offset: 36345},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 11, offset: 36362},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 11, offset: 36385},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 11, offset: 36410},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 11, offset: 36435},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 11, offset: 36462},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 11, offset: 36486},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 11, offset: 36504},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 11, offset: 36534},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 11, offset: 36567},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1010, col: 11, offset: 36611},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 1012, col: 1, offset: 36651},
			expr: &actionExpr{
				pos: position{line: 1012, col: 37, offset: 36687},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1012, col: 37, offset: 36687},
					expr: &charClassMatcher{
						pos:        position{line: 1012, col: 37, offset: 36687},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1016, col: 1, offset: 36917},
			expr: &choiceExpr{
				pos: position{line: 1017, col: 5, offset: 36963},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1017, col: 5, offset: 36963},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1018, col: 7, offset: 37061},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1018, col: 7, offset: 37061},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1018, col: 7, offset: 37061},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1018, col: 11, offset: 37065},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1022, col: 1, offset: 37232},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 5, offset: 37257},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 5, offset: 37257},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 5, offset: 37257},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1023, col: 5, offset: 37257},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 18, offset: 37270},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 40, offset: 37292},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 45, offset: 37297},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 55, offset: 37307},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 84, offset: 37336},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 9, offset: 37495},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1025, col: 9, offset: 37495},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1025, col: 9, offset: 37495},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 22, offset: 37508},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 44, offset: 37530},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 49, offset: 37535},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 59, offset: 37545},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 88, offset: 37574},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1028, col: 9, offset: 37777},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1028, col: 9, offset: 37777},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1028, col: 9, offset: 37777},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 22, offset: 37790},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 44, offset: 37812},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1028, col: 48, offset: 37816},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1028, col: 58, offset: 37826},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1028, col: 87, offset: 37855},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1036, col: 1, offset: 38071},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 15, offset: 38085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1036, col: 15, offset: 38085},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 39, offset: 38109},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1038, col: 1, offset: 38134},
			expr: &actionExpr{
				pos: position{line: 1038, col: 26, offset: 38159},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 26, offset: 38159},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1038, col: 26, offset: 38159},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1038, col: 32, offset: 38165},
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 33, offset: 38166},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1038, col: 51, offset: 38184},
							expr: &litMatcher{
								pos:        position{line: 1038, col: 52, offset: 38185},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 57, offset: 38190},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 62, offset: 38195},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 72, offset: 38205},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1038, col: 103, offset: 38236},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1042, col: 1, offset: 38374},
			expr: &seqExpr{
				pos: position{line: 1042, col: 34, offset: 38407},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 34, offset: 38407},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1042, col: 63, offset: 38436},
						expr: &seqExpr{
							pos: position{line: 1042, col: 64, offset: 38437},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1042, col: 64, offset: 38437},
									expr: &litMatcher{
										pos:        position{line: 1042, col: 66, offset: 38439},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1042, col: 73, offset: 38446},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1042, col: 73, offset: 38446},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1042, col: 81, offset: 38454},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1044, col: 1, offset: 38523},
			expr: &choiceExpr{
				pos: position{line: 1044, col: 33, offset: 38555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1044, col: 33, offset: 38555},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 11, offset: 38572},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 11, offset: 38606},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 11, offset: 38627},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 11, offset: 38652},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 11, offset: 38677},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 38704},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 11, offset: 38728},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 11, offset: 38745},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 11, offset: 38775},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 11, offset: 38821},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1056, col: 1, offset: 38863},
			expr: &actionExpr{
				pos: position{line: 1056, col: 39, offset: 38901},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1056, col: 39, offset: 38901},
					expr: &seqExpr{
						pos: position{line: 1056, col: 40, offset: 38902},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1056, col: 40, offset: 38902},
								expr: &litMatcher{
									pos:        position{line: 1056, col: 41, offset: 38903},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1056, col: 46, offset: 38908},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1060, col: 1, offset: 38983},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 39031},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1061, col: 5, offset: 39031},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1062, col: 7, offset: 39131},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1062, col: 7, offset: 39131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1062, col: 7, offset: 39131},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1062, col: 12, offset: 39136},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1066, col: 1, offset: 39305},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 26, offset: 39330},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1066, col: 26, offset: 39330},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1066, col: 26, offset: 39330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1066, col: 26, offset: 39330},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1066, col: 32, offset: 39336},
										expr: &ruleRefExpr{
											pos:  position{line: 1066, col: 33, offset: 39337},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1066, col: 52, offset: 39356},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1066, col: 52, offset: 39356},
											expr: &litMatcher{
												pos:        position{line: 1066, col: 53, offset: 39357},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1066, col: 57, offset: 39361},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1066, col: 61, offset: 39365},
											expr: &litMatcher{
												pos:        position{line: 1066, col: 62, offset: 39366},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 67, offset: 39371},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1066, col: 77, offset: 39381},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1066, col: 108, offset: 39412},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1068, col: 5, offset: 39604},
						run: (*parser).callonSingleQuoteItalicText16,
						expr: &seqExpr{
							pos: position{line: 1068, col: 5, offset: 39604},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1068, col: 5, offset: 39604},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1068, col: 11, offset: 39610},
										expr: &ruleRefExpr{
											pos:  position{line: 1068, col: 12, offset: 39611},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1068, col: 30, offset: 39629},
									expr: &litMatcher{
										pos:        position{line: 1068, col: 31, offset: 39630},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1068, col: 36, offset: 39635},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 40, offset: 39639},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1068, col: 50, offset: 39649},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1068, col: 50, offset: 39649},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1068, col: 54, offset: 39653},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1068, col: 85, offset: 39684},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1072, col: 1, offset: 39898},
			expr: &seqExpr{
				pos: position{line: 1072, col: 34, offset: 39931},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1072, col: 34, offset: 39931},
						expr: &ruleRefExpr{
							pos:  position{line: 1072, col: 35, offset: 39932},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1072, col: 41, offset: 39938},
						expr: &ruleRefExpr{
							pos:  position{line: 1072, col: 41, offset: 39938},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1074, col: 1, offset: 39971},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 33, offset: 40003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 33, offset: 40003},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 11, offset: 40020},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1076, col: 11, offset: 40053},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1076, col: 11, offset: 40053},
								expr: &ruleRefExpr{
									pos:  position{line: 1076, col: 11, offset: 40053},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1076, col: 18, offset: 40060},
								expr: &seqExpr{
									pos: position{line: 1076, col: 19, offset: 40061},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1076, col: 19, offset: 40061},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1076, col: 23, offset: 40065},
											expr: &litMatcher{
												pos:        position{line: 1076, col: 24, offset: 40066},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 11, offset: 40083},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 11, offset: 40104},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 40129},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 40154},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 40181},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 40205},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 40223},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 40253},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 40286},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 40332},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1088, col: 1, offset: 40374},
			expr: &actionExpr{
				pos: position{line: 1088, col: 39, offset: 40412},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1088, col: 39, offset: 40412},
					expr: &charClassMatcher{
						pos:        position{line: 1088, col: 39, offset: 40412},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1092, col: 1, offset: 40642},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 5, offset: 40690},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1093, col: 5, offset: 40690},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1094, col: 7, offset: 40790},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1094, col: 7, offset: 40790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1094, col: 7, offset: 40790},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1094, col: 11, offset: 40794},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1098, col: 1, offset: 40964},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 40991},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 40991},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1099, col: 5, offset: 40991},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1099, col: 5, offset: 40991},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 18, offset: 41004},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 40, offset: 41026},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1099, col: 45, offset: 41031},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1099, col: 55, offset: 41041},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1099, col: 86, offset: 41072},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1101, col: 9, offset: 41231},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1101, col: 9, offset: 41231},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1101, col: 9, offset: 41231},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 22, offset: 41244},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 44, offset: 41266},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 49, offset: 41271},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 59, offset: 41281},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 90, offset: 41312},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 9, offset: 41515},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1104, col: 9, offset: 41515},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 9, offset: 41515},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 22, offset: 41528},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 44, offset: 41550},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1104, col: 48, offset: 41554},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 58, offset: 41564},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1104, col: 89, offset: 41595},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1111, col: 1, offset: 41812},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 18, offset: 41829},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1111, col: 18, offset: 41829},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 45, offset: 41856},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1113, col: 1, offset: 41884},
			expr: &actionExpr{
				pos: position{line: 1113, col: 29, offset: 41912},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1113, col: 29, offset: 41912},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1113, col: 29, offset: 41912},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1113, col: 35, offset: 41918},
								expr: &ruleRefExpr{
									pos:  position{line: 1113, col: 36, offset: 41919},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1113, col: 54, offset: 41937},
							expr: &litMatcher{
								pos:        position{line: 1113, col: 55, offset: 41938},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1113, col: 60, offset: 41943},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1113, col: 65, offset: 41948},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1113, col: 75, offset: 41958},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1113, col: 109, offset: 41992},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1117, col: 1, offset: 42133},
			expr: &seqExpr{
				pos: position{line: 1117, col: 37, offset: 42169},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1117, col: 37, offset: 42169},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1117, col: 69, offset: 42201},
						expr: &seqExpr{
							pos: position{line: 1117, col: 70, offset: 42202},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1117, col: 70, offset: 42202},
									expr: &litMatcher{
										pos:        position{line: 1117, col: 72, offset: 42204},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1117, col: 79, offset: 42211},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1117, col: 79, offset: 42211},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1117, col: 87, offset: 42219},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1119, col: 1, offset: 42290},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 36, offset: 42325},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1119, col: 36, offset: 42325},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 42342},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 11, offset: 42379},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1122, col: 11, offset: 42399},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 11, offset: 42422},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1124, col: 11, offset: 42447},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 11, offset: 42474},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1126, col: 11, offset: 42498},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 11, offset: 42515},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 42545},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 42594},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1131, col: 1, offset: 42639},
			expr: &actionExpr{
				pos: position{line: 1131, col: 42, offset: 42680},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1131, col: 42, offset: 42680},
					expr: &seqExpr{
						pos: position{line: 1131, col: 43, offset: 42681},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1131, col: 43, offset: 42681},
								expr: &litMatcher{
									pos:        position{line: 1131, col: 44, offset: 42682},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1131, col: 49, offset: 42687},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1135, col: 1, offset: 42762},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 5, offset: 42813},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1136, col: 5, offset: 42813},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1137, col: 7, offset: 42916},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1137, col: 7, offset: 42916},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 7, offset: 42916},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1137, col: 12, offset: 42921},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1141, col: 1, offset: 43093},
			expr: &choiceExpr{
				pos: position{line: 1141, col: 29, offset: 43121},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1141, col: 29, offset: 43121},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1141, col: 29, offset: 43121},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1141, col: 29, offset: 43121},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1141, col: 35, offset: 43127},
										expr: &ruleRefExpr{
											pos:  position{line: 1141, col: 36, offset: 43128},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1141, col: 55, offset: 43147},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1141, col: 55, offset: 43147},
											expr: &litMatcher{
												pos:        position{line: 1141, col: 56, offset: 43148},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1141, col: 60, offset: 43152},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1141, col: 64, offset: 43156},
											expr: &litMatcher{
												pos:        position{line: 1141, col: 65, offset: 43157},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 70, offset: 43162},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1141, col: 80, offset: 43172},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1141, col: 114, offset: 43206},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 43401},
						run: (*parser).callonSingleQuoteMonospaceText16,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 43401},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 5, offset: 43401},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1143, col: 11, offset: 43407},
										expr: &ruleRefExpr{
											pos:  position{line: 1143, col: 12, offset: 43408},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1143, col: 30, offset: 43426},
									expr: &litMatcher{
										pos:        position{line: 1143, col: 31, offset: 43427},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 36, offset: 43432},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1143, col: 40, offset: 43436},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1143, col: 50, offset: 43446},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1143, col: 50, offset: 43446},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1143, col: 54, offset: 43450},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1143, col: 88, offset: 43484},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1147, col: 1, offset: 43704},
			expr: &seqExpr{
				pos: position{line: 1147, col: 37, offset: 43740},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1147, col: 37, offset: 43740},
						expr: &ruleRefExpr{
							pos:  position{line: 1147, col: 38, offset: 43741},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1147, col: 44, offset: 43747},
						expr: &ruleRefExpr{
							pos:  position{line: 1147, col: 44, offset: 43747},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1149, col: 1, offset: 43783},
			expr: &choiceExpr{
				pos: position{line: 1149, col: 37, offset: 43819},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1149, col: 37, offset: 43819},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 43836},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1151, col: 11, offset: 43873},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1151, col: 11, offset: 43873},
								expr: &ruleRefExpr{
									pos:  position{line: 1151, col: 11, offset: 43873},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1151, col: 18, offset: 43880},
								expr: &seqExpr{
									pos: position{line: 1151, col: 19, offset: 43881},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1151, col: 19, offset: 43881},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1151, col: 23, offset: 43885},
											expr: &litMatcher{
												pos:        position{line: 1151, col: 24, offset: 43886},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 44015},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 44054},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 44074},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 44096},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1156, col: 11, offset: 44121},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 44148},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 11, offset: 44172},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1159, col: 11, offset: 44189},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 44219},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 44252},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 44301},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1164, col: 1, offset: 44346},
			expr: &actionExpr{
				pos: position{line: 1164, col: 42, offset: 44387},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1164, col: 42, offset: 44387},
					expr: &charClassMatcher{
						pos:        position{line: 1164, col: 42, offset: 44387},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1168, col: 1, offset: 44609},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 5, offset: 44660},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1169, col: 5, offset: 44660},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1170, col: 7, offset: 44763},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1170, col: 7, offset: 44763},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1170, col: 7, offset: 44763},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1170, col: 11, offset: 44767},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1174, col: 1, offset: 44940},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 44970},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 44970},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 44970},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1175, col: 5, offset: 44970},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 18, offset: 44983},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 40, offset: 45005},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 45, offset: 45010},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 55, offset: 45020},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 89, offset: 45054},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1177, col: 9, offset: 45213},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1177, col: 9, offset: 45213},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1177, col: 9, offset: 45213},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 22, offset: 45226},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 44, offset: 45248},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 49, offset: 45253},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 59, offset: 45263},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 93, offset: 45297},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 9, offset: 45500},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1180, col: 9, offset: 45500},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1180, col: 9, offset: 45500},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 22, offset: 45513},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 44, offset: 45535},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 48, offset: 45539},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 58, offset: 45549},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 92, offset: 45583},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1184, col: 1, offset: 45737},
			expr: &actionExpr{
				pos: position{line: 1184, col: 18, offset: 45754},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1184, col: 18, offset: 45754},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1184, col: 18, offset: 45754},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1184, col: 24, offset: 45760},
								expr: &ruleRefExpr{
									pos:  position{line: 1184, col: 25, offset: 45761},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1184, col: 43, offset: 45779},
							expr: &litMatcher{
								pos:        position{line: 1184, col: 44, offset: 45780},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1184, col: 48, offset: 45784},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 52, offset: 45788},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1184, col: 61, offset: 45797},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1184, col: 83, offset: 45819},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1188, col: 1, offset: 45919},
			expr: &choiceExpr{
				pos: position{line: 1188, col: 25, offset: 45943},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1188, col: 25, offset: 45943},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 38, offset: 45956},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1190, col: 1, offset: 45977},
			expr: &actionExpr{
				pos: position{line: 1190, col: 21, offset: 45997},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1190, col: 21, offset: 45997},
					expr: &charClassMatcher{
						pos:        position{line: 1190, col: 21, offset: 45997},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1194, col: 1, offset: 46078},
			expr: &actionExpr{
				pos: position{line: 1194, col: 25, offset: 46102},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1194, col: 25, offset: 46102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1194, col: 25, offset: 46102},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 38, offset: 46115},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1194, col: 60, offset: 46137},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1194, col: 64, offset: 46141},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1194, col: 73, offset: 46150},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1194, col: 95, offset: 46172},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1198, col: 1, offset: 46305},
			expr: &actionExpr{
				pos: position{line: 1198, col: 20, offset: 46324},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 20, offset: 46324},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1198, col: 20, offset: 46324},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1198, col: 26, offset: 46330},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 27, offset: 46331},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1198, col: 45, offset: 46349},
							expr: &litMatcher{
								pos:        position{line: 1198, col: 46, offset: 46350},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1198, col: 50, offset: 46354},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 54, offset: 46358},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 63, offset: 46367},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1198, col: 87, offset: 46391},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1202, col: 1, offset: 46493},
			expr: &choiceExpr{
				pos: position{line: 1202, col: 27, offset: 46519},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 27, offset: 46519},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 40, offset: 46532},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1204, col: 1, offset: 46555},
			expr: &actionExpr{
				pos: position{line: 1204, col: 23, offset: 46577},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1204, col: 23, offset: 46577},
					expr: &charClassMatcher{
						pos:        position{line: 1204, col: 23, offset: 46577},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1208, col: 1, offset: 46658},
			expr: &actionExpr{
				pos: position{line: 1208, col: 27, offset: 46684},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 27, offset: 46684},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1208, col: 27, offset: 46684},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 40, offset: 46697},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 62, offset: 46719},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 66, offset: 46723},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 75, offset: 46732},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1208, col: 99, offset: 46756},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1215, col: 1, offset: 47005},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 22, offset: 47026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 22, offset: 47026},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 46, offset: 47050},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 70, offset: 47074},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1217, col: 1, offset: 47094},
			expr: &litMatcher{
				pos:        position{line: 1217, col: 32, offset: 47125},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1219, col: 1, offset: 47132},
			expr: &actionExpr{
				pos: position{line: 1219, col: 26, offset: 47157},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1219, col: 26, offset: 47157},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1219, col: 26, offset: 47157},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1219, col: 54, offset: 47185},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 63, offset: 47194},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1219, col: 93, offset: 47224},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1219, col: 121, offset: 47252},
							expr: &ruleRefExpr{
								pos:  position{line: 1219, col: 122, offset: 47253},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1223, col: 1, offset: 47362},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 33, offset: 47394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1223, col: 34, offset: 47395},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1223, col: 34, offset: 47395},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1223, col: 35, offset: 47396},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1223, col: 35, offset: 47396},
											expr: &ruleRefExpr{
												pos:  position{line: 1223, col: 36, offset: 47397},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1223, col: 64, offset: 47425},
											expr: &ruleRefExpr{
												pos:  position{line: 1223, col: 65, offset: 47426},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1223, col: 71, offset: 47432},
											expr: &ruleRefExpr{
												pos:  position{line: 1223, col: 72, offset: 47433},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1223, col: 80, offset: 47441,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1223, col: 83, offset: 47444},
									expr: &seqExpr{
										pos: position{line: 1223, col: 84, offset: 47445},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1223, col: 84, offset: 47445},
												expr: &seqExpr{
													pos: position{line: 1223, col: 86, offset: 47447},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1223, col: 86, offset: 47447},
															expr: &ruleRefExpr{
																pos:  position{line: 1223, col: 86, offset: 47447},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1223, col: 93, offset: 47454},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1223, col: 122, offset: 47483},
												expr: &ruleRefExpr{
													pos:  position{line: 1223, col: 123, offset: 47484},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1223, col: 151, offset: 47512},
												expr: &ruleRefExpr{
													pos:  position{line: 1223, col: 152, offset: 47513},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1223, col: 160, offset: 47521,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 7, offset: 47665},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1225, col: 8, offset: 47666},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1225, col: 8, offset: 47666},
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 9, offset: 47667},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1225, col: 15, offset: 47673},
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 16, offset: 47674},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1225, col: 24, offset: 47682},
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 25, offset: 47683},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1225, col: 53, offset: 47711,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1229, col: 1, offset: 47797},
			expr: &litMatcher{
				pos:        position{line: 1229, col: 32, offset: 47828},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1231, col: 1, offset: 47837},
			expr: &actionExpr{
				pos: position{line: 1231, col: 26, offset: 47862},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 26, offset: 47862},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1231, col: 26, offset: 47862},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 54, offset: 47890},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 63, offset: 47899},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 93, offset: 47929},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1231, col: 121, offset: 47957},
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 122, offset: 47958},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1235, col: 1, offset: 48067},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 33, offset: 48099},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1235, col: 34, offset: 48100},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1235, col: 34, offset: 48100},
							expr: &seqExpr{
								pos: position{line: 1235, col: 35, offset: 48101},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1235, col: 35, offset: 48101},
										expr: &ruleRefExpr{
											pos:  position{line: 1235, col: 36, offset: 48102},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1235, col: 64, offset: 48130,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1237, col: 7, offset: 48297},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1237, col: 7, offset: 48297},
							expr: &seqExpr{
								pos: position{line: 1237, col: 8, offset: 48298},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1237, col: 8, offset: 48298},
										expr: &ruleRefExpr{
											pos:  position{line: 1237, col: 9, offset: 48299},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1237, col: 15, offset: 48305},
										expr: &ruleRefExpr{
											pos:  position{line: 1237, col: 16, offset: 48306},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1237, col: 24, offset: 48314},
										expr: &ruleRefExpr{
											pos:  position{line: 1237, col: 25, offset: 48315},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1237, col: 53, offset: 48343,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1241, col: 1, offset: 48430},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 21, offset: 48450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1241, col: 21, offset: 48450},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1241, col: 21, offset: 48450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 21, offset: 48450},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1241, col: 30, offset: 48459},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1241, col: 38, offset: 48467},
										expr: &ruleRefExpr{
											pos:  position{line: 1241, col: 39, offset: 48468},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1241, col: 67, offset: 48496},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1243, col: 5, offset: 48594},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1243, col: 5, offset: 48594},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 5, offset: 48594},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 15, offset: 48604},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1243, col: 23, offset: 48612},
										expr: &choiceExpr{
											pos: position{line: 1243, col: 24, offset: 48613},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1243, col: 24, offset: 48613},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1243, col: 37, offset: 48626},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 65, offset: 48654},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1247, col: 1, offset: 48754},
			expr: &actionExpr{
				pos: position{line: 1247, col: 30, offset: 48783},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1247, col: 30, offset: 48783},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1254, col: 1, offset: 48963},
			expr: &choiceExpr{
				pos: position{line: 1254, col: 19, offset: 48981},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1254, col: 19, offset: 48981},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 44, offset: 49006},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1256, col: 1, offset: 49033},
			expr: &choiceExpr{
				pos: position{line: 1256, col: 27, offset: 49059},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1256, col: 27, offset: 49059},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1256, col: 27, offset: 49059},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1256, col: 27, offset: 49059},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1256, col: 32, offset: 49064},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 36, offset: 49068},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1256, col: 40, offset: 49072},
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 40, offset: 49072},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 47, offset: 49079},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1256, col: 51, offset: 49083},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1256, col: 58, offset: 49090},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1256, col: 79, offset: 49111},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1258, col: 5, offset: 49196},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1258, col: 5, offset: 49196},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1258, col: 5, offset: 49196},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1258, col: 10, offset: 49201},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1258, col: 14, offset: 49205},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1258, col: 18, offset: 49209},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1262, col: 1, offset: 49285},
			expr: &actionExpr{
				pos: position{line: 1262, col: 27, offset: 49311},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1262, col: 27, offset: 49311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1262, col: 27, offset: 49311},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 35, offset: 49319},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 40, offset: 49324},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1262, col: 54, offset: 49338},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1262, col: 72, offset: 49356},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1266, col: 1, offset: 49483},
			expr: &ruleRefExpr{
				pos:  position{line: 1266, col: 24, offset: 49506},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1271, col: 1, offset: 49633},
			expr: &choiceExpr{
				pos: position{line: 1271, col: 9, offset: 49641},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1271, col: 9, offset: 49641},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1271, col: 24, offset: 49656},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1274, col: 1, offset: 49740},
			expr: &actionExpr{
				pos: position{line: 1274, col: 17, offset: 49756},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1274, col: 17, offset: 49756},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1274, col: 17, offset: 49756},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 25, offset: 49764},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 30, offset: 49769},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1274, col: 40, offset: 49779},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1274, col: 58, offset: 49797},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1278, col: 1, offset: 49912},
			expr: &actionExpr{
				pos: position{line: 1278, col: 17, offset: 49928},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1278, col: 17, offset: 49928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1278, col: 17, offset: 49928},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1278, col: 22, offset: 49933},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1278, col: 42, offset: 49953},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1278, col: 59, offset: 49970},
								expr: &ruleRefExpr{
									pos:  position{line: 1278, col: 60, offset: 49971},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1282, col: 1, offset: 50068},
			expr: &actionExpr{
				pos: position{line: 1282, col: 19, offset: 50086},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1282, col: 19, offset: 50086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1282, col: 19, offset: 50086},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1282, col: 23, offset: 50090},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1282, col: 33, offset: 50100},
								expr: &ruleRefExpr{
									pos:  position{line: 1282, col: 34, offset: 50101},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1283, col: 5, offset: 50134},
							expr: &ruleRefExpr{
								pos:  position{line: 1283, col: 5, offset: 50134},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1283, col: 12, offset: 50141},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1283, col: 23, offset: 50152},
								expr: &ruleRefExpr{
									pos:  position{line: 1283, col: 24, offset: 50153},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1283, col: 43, offset: 50172},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1287, col: 1, offset: 50293},
			expr: &actionExpr{
				pos: position{line: 1287, col: 30, offset: 50322},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1287, col: 30, offset: 50322},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1289, col: 5, offset: 50375},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1289, col: 6, offset: 50376},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1289, col: 6, offset: 50376},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1289, col: 6, offset: 50376},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1289, col: 11, offset: 50381},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1289, col: 20, offset: 50390},
												expr: &choiceExpr{
													pos: position{line: 1289, col: 21, offset: 50391},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1289, col: 21, offset: 50391},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1289, col: 34, offset: 50404},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1289, col: 56, offset: 50426},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1289, col: 61, offset: 50431},
											expr: &notExpr{
												pos: position{line: 1289, col: 63, offset: 50433},
												expr: &litMatcher{
													pos:        position{line: 1289, col: 64, offset: 50434},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1289, col: 69, offset: 50439},
											expr: &litMatcher{
												pos:        position{line: 1289, col: 69, offset: 50439},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1293, col: 6, offset: 50570},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1293, col: 6, offset: 50570},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1293, col: 6, offset: 50570},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1293, col: 15, offset: 50579},
												expr: &choiceExpr{
													pos: position{line: 1293, col: 16, offset: 50580},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1293, col: 16, offset: 50580},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1293, col: 29, offset: 50593},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1293, col: 53, offset: 50617},
											expr: &notExpr{
												pos: position{line: 1293, col: 55, offset: 50619},
												expr: &litMatcher{
													pos:        position{line: 1293, col: 56, offset: 50620},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1293, col: 61, offset: 50625},
											expr: &litMatcher{
												pos:        position{line: 1293, col: 61, offset: 50625},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1299, col: 1, offset: 50745},
			expr: &actionExpr{
				pos: position{line: 1299, col: 18, offset: 50762},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1299, col: 18, offset: 50762},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1303, col: 1, offset: 50852},
			expr: &actionExpr{
				pos: position{line: 1303, col: 24, offset: 50875},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1303, col: 24, offset: 50875},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1307, col: 1, offset: 50972},
			expr: &actionExpr{
				pos: position{line: 1307, col: 26, offset: 50997},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1307, col: 26, offset: 50997},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1312, col: 1, offset: 51159},
			expr: &actionExpr{
				pos: position{line: 1313, col: 5, offset: 51180},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 5, offset: 51180},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1313, col: 5, offset: 51180},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1313, col: 14, offset: 51189},
								expr: &choiceExpr{
									pos: position{line: 1313, col: 15, offset: 51190},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1313, col: 15, offset: 51190},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1314, col: 11, offset: 51206},
											expr: &ruleRefExpr{
												pos:  position{line: 1314, col: 11, offset: 51206},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1315, col: 11, offset: 51225},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1316, col: 11, offset: 51250},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1317, col: 11, offset: 51273},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1318, col: 11, offset: 51292},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1318, col: 21, offset: 51302},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1322, col: 1, offset: 51376},
			expr: &choiceExpr{
				pos: position{line: 1322, col: 17, offset: 51392},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1322, col: 17, offset: 51392},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 40, offset: 51415},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1325, col: 1, offset: 51546},
			expr: &actionExpr{
				pos: position{line: 1325, col: 25, offset: 51570},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 25, offset: 51570},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1325, col: 25, offset: 51570},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 33, offset: 51578},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1325, col: 38, offset: 51583},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1325, col: 38, offset: 51583},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 57, offset: 51602},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1325, col: 79, offset: 51624},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1325, col: 97, offset: 51642},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1329, col: 1, offset: 51757},
			expr: &actionExpr{
				pos: position{line: 1329, col: 25, offset: 51781},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1329, col: 25, offset: 51781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1329, col: 25, offset: 51781},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1329, col: 30, offset: 51786},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1329, col: 48, offset: 51804},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1329, col: 65, offset: 51821},
								expr: &ruleRefExpr{
									pos:  position{line: 1329, col: 66, offset: 51822},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1336, col: 1, offset: 52024},
			expr: &actionExpr{
				pos: position{line: 1336, col: 15, offset: 52038},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1336, col: 15, offset: 52038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1336, col: 15, offset: 52038},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1336, col: 26, offset: 52049},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 27, offset: 52050},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1336, col: 40, offset: 52063},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 50, offset: 52073},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 56, offset: 52079},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1336, col: 66, offset: 52089},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 84, offset: 52107},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1336, col: 101, offset: 52124},
							expr: &ruleRefExpr{
								pos:  position{line: 1336, col: 101, offset: 52124},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1336, col: 108, offset: 52131},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1340, col: 1, offset: 52247},
			expr: &actionExpr{
				pos: position{line: 1340, col: 16, offset: 52262},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1340, col: 16, offset: 52262},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1340, col: 16, offset: 52262},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1340, col: 25, offset: 52271},
							expr: &litMatcher{
								pos:        position{line: 1340, col: 26, offset: 52272},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 30, offset: 52276},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1340, col: 36, offset: 52282},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1340, col: 46, offset: 52292},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1340, col: 64, offset: 52310},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1344, col: 1, offset: 52428},
			expr: &actionExpr{
				pos: position{line: 1344, col: 20, offset: 52447},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 20, offset: 52447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1344, col: 20, offset: 52447},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 24, offset: 52451},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1344, col: 28, offset: 52455},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 29, offset: 52456},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1344, col: 56, offset: 52483},
							expr: &litMatcher{
								pos:        position{line: 1344, col: 56, offset: 52483},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 61, offset: 52488},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1344, col: 67, offset: 52494},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 68, offset: 52495},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1344, col: 95, offset: 52522},
							expr: &litMatcher{
								pos:        position{line: 1344, col: 95, offset: 52522},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 100, offset: 52527},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1344, col: 107, offset: 52534},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 108, offset: 52535},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1344, col: 135, offset: 52562},
							expr: &litMatcher{
								pos:        position{line: 1344, col: 135, offset: 52562},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1344, col: 140, offset: 52567},
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 140, offset: 52567},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 147, offset: 52574},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1344, col: 158, offset: 52585},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 159, offset: 52586},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1344, col: 178, offset: 52605},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1351, col: 1, offset: 52902},
			expr: &choiceExpr{
				pos: position{line: 1351, col: 19, offset: 52920},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1351, col: 19, offset: 52920},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1351, col: 19, offset: 52920},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1351, col: 19, offset: 52920},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1351, col: 32, offset: 52933},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1351, col: 41, offset: 52942},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1351, col: 58, offset: 52959},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 53029},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 53029},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 5, offset: 53029},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 17, offset: 53041},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 22, offset: 53046},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 35, offset: 53059},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 39, offset: 53063},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1353, col: 47, offset: 53071},
										expr: &ruleRefExpr{
											pos:  position{line: 1353, col: 48, offset: 53072},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 66, offset: 53090},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1357, col: 1, offset: 53155},
			expr: &ruleRefExpr{
				pos:  position{line: 1357, col: 16, offset: 53170},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1359, col: 1, offset: 53183},
			expr: &actionExpr{
				pos: position{line: 1359, col: 20, offset: 53202},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1359, col: 20, offset: 53202},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1359, col: 29, offset: 53211},
						expr: &seqExpr{
							pos: position{line: 1359, col: 30, offset: 53212},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1359, col: 30, offset: 53212},
									expr: &litMatcher{
										pos:        position{line: 1359, col: 31, offset: 53213},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1359, col: 35, offset: 53217},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1366, col: 1, offset: 53548},
			expr: &actionExpr{
				pos: position{line: 1366, col: 19, offset: 53566},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1366, col: 19, offset: 53566},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1366, col: 19, offset: 53566},
							expr: &ruleRefExpr{
								pos:  position{line: 1366, col: 20, offset: 53567},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 5, offset: 53656},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1367, col: 12, offset: 53663},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1367, col: 12, offset: 53663},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1368, col: 11, offset: 53687},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1369, col: 11, offset: 53712},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1370, col: 11, offset: 53737},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1371, col: 11, offset: 53760},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1372, col: 11, offset: 53783},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1373, col: 11, offset: 53807},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1374, col: 11, offset: 53836},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1375, col: 11, offset: 53864},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1376, col: 11, offset: 53881},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1380, col: 1, offset: 53926},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 19, offset: 53944},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1380, col: 19, offset: 53944},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1380, col: 19, offset: 53944},
								expr: &ruleRefExpr{
									pos:  position{line: 1380, col: 21, offset: 53946},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1380, col: 31, offset: 53956},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 19, offset: 54028},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 19, offset: 54069},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 19, offset: 54111},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 19, offset: 54153},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1385, col: 19, offset: 54195},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1386, col: 19, offset: 54234},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1387, col: 19, offset: 54275},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1389, col: 1, offset: 54304},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 20, offset: 54323},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1389, col: 20, offset: 54323},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1389, col: 36, offset: 54339},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1391, col: 1, offset: 54355},
			expr: &actionExpr{
				pos: position{line: 1391, col: 17, offset: 54371},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 17, offset: 54371},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1391, col: 17, offset: 54371},
							expr: &ruleRefExpr{
								pos:  position{line: 1391, col: 18, offset: 54372},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 22, offset: 54376},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1391, col: 31, offset: 54385},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 52, offset: 54406},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1391, col: 61, offset: 54415},
								expr: &ruleRefExpr{
									pos:  position{line: 1391, col: 62, offset: 54416},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1391, col: 73, offset: 54427},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1395, col: 1, offset: 54501},
			expr: &actionExpr{
				pos: position{line: 1395, col: 24, offset: 54524},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1395, col: 24, offset: 54524},
					expr: &seqExpr{
						pos: position{line: 1395, col: 25, offset: 54525},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1395, col: 25, offset: 54525},
								expr: &ruleRefExpr{
									pos:  position{line: 1395, col: 26, offset: 54526},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1395, col: 36, offset: 54536},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1395, col: 36, offset: 54536},
										expr: &ruleRefExpr{
											pos:  position{line: 1395, col: 36, offset: 54536},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1395, col: 45, offset: 54545},
										expr: &charClassMatcher{
											pos:        position{line: 1395, col: 45, offset: 54545},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1399, col: 1, offset: 54599},
			expr: &oneOrMoreExpr{
				pos: position{line: 1399, col: 13, offset: 54611},
				expr: &ruleRefExpr{
					pos:  position{line: 1399, col: 13, offset: 54611},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1401, col: 1, offset: 54623},
			expr: &actionExpr{
				pos: position{line: 1401, col: 12, offset: 54634},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1401, col: 12, offset: 54634},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1401, col: 12, offset: 54634},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1401, col: 16, offset: 54638},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1401, col: 21, offset: 54643},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1401, col: 21, offset: 54643},
									expr: &charClassMatcher{
										pos:        position{line: 1401, col: 21, offset: 54643},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1401, col: 69, offset: 54691},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1401, col: 73, offset: 54695},
							expr: &ruleRefExpr{
								pos:  position{line: 1401, col: 73, offset: 54695},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1401, col: 80, offset: 54702},
							expr: &choiceExpr{
								pos: position{line: 1401, col: 82, offset: 54704},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1401, col: 82, offset: 54704},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1401, col: 88, offset: 54710},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1405, col: 1, offset: 54767},
			expr: &actionExpr{
				pos: position{line: 1405, col: 20, offset: 54786},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1405, col: 20, offset: 54786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1405, col: 20, offset: 54786},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 25, offset: 54791},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1405, col: 48, offset: 54814},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1405, col: 61, offset: 54827},
								expr: &ruleRefExpr{
									pos:  position{line: 1405, col: 61, offset: 54827},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1409, col: 1, offset: 54928},
			expr: &actionExpr{
				pos: position{line: 1409, col: 26, offset: 54953},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 26, offset: 54953},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1409, col: 26, offset: 54953},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 30, offset: 54957},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1409, col: 35, offset: 54962},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1409, col: 35, offset: 54962},
									expr: &charClassMatcher{
										pos:        position{line: 1409, col: 35, offset: 54962},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1409, col: 83, offset: 55010},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1409, col: 87, offset: 55014},
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 87, offset: 55014},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1416, col: 1, offset: 55248},
			expr: &seqExpr{
				pos: position{line: 1416, col: 25, offset: 55272},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1416, col: 25, offset: 55272},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1416, col: 31, offset: 55278},
						expr: &ruleRefExpr{
							pos:  position{line: 1416, col: 31, offset: 55278},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 38, offset: 55285},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1418, col: 1, offset: 55347},
			expr: &seqExpr{
				pos: position{line: 1418, col: 30, offset: 55376},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1418, col: 30, offset: 55376},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1418, col: 36, offset: 55382},
						expr: &ruleRefExpr{
							pos:  position{line: 1418, col: 36, offset: 55382},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 43, offset: 55389},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1420, col: 1, offset: 55396},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 28, offset: 55423},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1420, col: 29, offset: 55424},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1420, col: 29, offset: 55424},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1420, col: 35, offset: 55430},
								expr: &ruleRefExpr{
									pos:  position{line: 1420, col: 35, offset: 55430},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1420, col: 42, offset: 55437},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 49, offset: 55444},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1422, col: 1, offset: 55451},
			expr: &actionExpr{
				pos: position{line: 1422, col: 16, offset: 55466},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1422, col: 16, offset: 55466},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1422, col: 16, offset: 55466},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1422, col: 27, offset: 55477},
								expr: &ruleRefExpr{
									pos:  position{line: 1422, col: 28, offset: 55478},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1422, col: 41, offset: 55491},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1422, col: 67, offset: 55517},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1422, col: 76, offset: 55526},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1422, col: 104, offset: 55554},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1426, col: 1, offset: 55673},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1426, col: 31, offset: 55703},
				expr: &actionExpr{
					pos: position{line: 1426, col: 32, offset: 55704},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1426, col: 32, offset: 55704},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1426, col: 32, offset: 55704},
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 33, offset: 55705},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1426, col: 57, offset: 55729},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 66, offset: 55738},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1433, col: 1, offset: 56082},
			expr: &seqExpr{
				pos: position{line: 1433, col: 26, offset: 56107},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1433, col: 26, offset: 56107},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1433, col: 33, offset: 56114},
						expr: &ruleRefExpr{
							pos:  position{line: 1433, col: 33, offset: 56114},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1433, col: 40, offset: 56121},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1435, col: 1, offset: 56128},
			expr: &seqExpr{
				pos: position{line: 1435, col: 31, offset: 56158},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1435, col: 31, offset: 56158},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1435, col: 38, offset: 56165},
						expr: &ruleRefExpr{
							pos:  position{line: 1435, col: 38, offset: 56165},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 45, offset: 56172},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1437, col: 1, offset: 56179},
			expr: &choiceExpr{
				pos: position{line: 1437, col: 29, offset: 56207},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1437, col: 30, offset: 56208},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1437, col: 30, offset: 56208},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1437, col: 37, offset: 56215},
								expr: &ruleRefExpr{
									pos:  position{line: 1437, col: 37, offset: 56215},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1437, col: 44, offset: 56222},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 51, offset: 56229},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1439, col: 1, offset: 56236},
			expr: &actionExpr{
				pos: position{line: 1439, col: 17, offset: 56252},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1439, col: 17, offset: 56252},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1439, col: 17, offset: 56252},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1439, col: 28, offset: 56263},
								expr: &ruleRefExpr{
									pos:  position{line: 1439, col: 29, offset: 56264},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1439, col: 42, offset: 56277},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1439, col: 69, offset: 56304},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1439, col: 78, offset: 56313},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1439, col: 107, offset: 56342},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1443, col: 1, offset: 56463},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1443, col: 32, offset: 56494},
				expr: &actionExpr{
					pos: position{line: 1443, col: 33, offset: 56495},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1443, col: 33, offset: 56495},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1443, col: 33, offset: 56495},
								expr: &ruleRefExpr{
									pos:  position{line: 1443, col: 34, offset: 56496},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1443, col: 59, offset: 56521},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1443, col: 68, offset: 56530},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1450, col: 1, offset: 56874},
			expr: &seqExpr{
				pos: position{line: 1450, col: 26, offset: 56899},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1450, col: 26, offset: 56899},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1450, col: 33, offset: 56906},
						expr: &ruleRefExpr{
							pos:  position{line: 1450, col: 33, offset: 56906},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 40, offset: 56913},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1452, col: 1, offset: 56920},
			expr: &seqExpr{
				pos: position{line: 1452, col: 31, offset: 56950},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1452, col: 31, offset: 56950},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1452, col: 38, offset: 56957},
						expr: &ruleRefExpr{
							pos:  position{line: 1452, col: 38, offset: 56957},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 45, offset: 56964},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1454, col: 1, offset: 56971},
			expr: &choiceExpr{
				pos: position{line: 1454, col: 29, offset: 56999},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1454, col: 30, offset: 57000},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1454, col: 30, offset: 57000},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1454, col: 37, offset: 57007},
								expr: &ruleRefExpr{
									pos:  position{line: 1454, col: 37, offset: 57007},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1454, col: 44, offset: 57014},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 51, offset: 57021},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1456, col: 1, offset: 57028},
			expr: &actionExpr{
				pos: position{line: 1456, col: 17, offset: 57044},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 17, offset: 57044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1456, col: 17, offset: 57044},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1456, col: 28, offset: 57055},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 29, offset: 57056},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1456, col: 42, offset: 57069},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 69, offset: 57096},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 78, offset: 57105},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1456, col: 107, offset: 57134},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1460, col: 1, offset: 57255},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1460, col: 32, offset: 57286},
				expr: &actionExpr{
					pos: position{line: 1460, col: 33, offset: 57287},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1460, col: 33, offset: 57287},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1460, col: 33, offset: 57287},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 34, offset: 57288},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1460, col: 59, offset: 57313},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 68, offset: 57322},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1467, col: 1, offset: 57664},
			expr: &seqExpr{
				pos: position{line: 1467, col: 24, offset: 57687},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1467, col: 24, offset: 57687},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1467, col: 31, offset: 57694},
						expr: &ruleRefExpr{
							pos:  position{line: 1467, col: 31, offset: 57694},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1467, col: 38, offset: 57701},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1469, col: 1, offset: 57733},
			expr: &seqExpr{
				pos: position{line: 1469, col: 29, offset: 57761},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 29, offset: 57761},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1469, col: 36, offset: 57768},
						expr: &ruleRefExpr{
							pos:  position{line: 1469, col: 36, offset: 57768},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 43, offset: 57775},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1471, col: 1, offset: 57807},
			expr: &choiceExpr{
				pos: position{line: 1471, col: 27, offset: 57833},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1471, col: 28, offset: 57834},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1471, col: 28, offset: 57834},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1471, col: 35, offset: 57841},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 35, offset: 57841},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1471, col: 42, offset: 57848},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1471, col: 49, offset: 57855},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1473, col: 1, offset: 57887},
			expr: &actionExpr{
				pos: position{line: 1473, col: 15, offset: 57901},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 15, offset: 57901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1473, col: 15, offset: 57901},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1473, col: 26, offset: 57912},
								expr: &ruleRefExpr{
									pos:  position{line: 1473, col: 27, offset: 57913},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 40, offset: 57926},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1473, col: 65, offset: 57951},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 74, offset: 57960},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1473, col: 101, offset: 57987},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1477, col: 1, offset: 58104},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1477, col: 30, offset: 58133},
				expr: &actionExpr{
					pos: position{line: 1477, col: 31, offset: 58134},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1477, col: 31, offset: 58134},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1477, col: 31, offset: 58134},
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 32, offset: 58135},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1477, col: 55, offset: 58158},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 64, offset: 58167},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1486, col: 1, offset: 58560},
			expr: &actionExpr{
				pos: position{line: 1486, col: 15, offset: 58574},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 15, offset: 58574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1486, col: 15, offset: 58574},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 27, offset: 58586},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1487, col: 5, offset: 58604},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1491, col: 5, offset: 58803},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 30, offset: 58828},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1491, col: 39, offset: 58837},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1491, col: 66, offset: 58864},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1495, col: 1, offset: 58989},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1495, col: 30, offset: 59018},
				expr: &actionExpr{
					pos: position{line: 1495, col: 31, offset: 59019},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1495, col: 31, offset: 59019},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1495, col: 31, offset: 59019},
								expr: &ruleRefExpr{
									pos:  position{line: 1495, col: 32, offset: 59020},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1495, col: 55, offset: 59043},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1495, col: 64, offset: 59052},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1502, col: 1, offset: 59396},
			expr: &seqExpr{
				pos: position{line: 1502, col: 26, offset: 59421},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1502, col: 26, offset: 59421},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1502, col: 33, offset: 59428},
						expr: &ruleRefExpr{
							pos:  position{line: 1502, col: 33, offset: 59428},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1502, col: 40, offset: 59435},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1504, col: 1, offset: 59442},
			expr: &seqExpr{
				pos: position{line: 1504, col: 31, offset: 59472},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1504, col: 31, offset: 59472},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1504, col: 38, offset: 59479},
						expr: &ruleRefExpr{
							pos:  position{line: 1504, col: 38, offset: 59479},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1504, col: 45, offset: 59486},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1506, col: 1, offset: 59493},
			expr: &choiceExpr{
				pos: position{line: 1506, col: 29, offset: 59521},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1506, col: 30, offset: 59522},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1506, col: 30, offset: 59522},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1506, col: 37, offset: 59529},
								expr: &ruleRefExpr{
									pos:  position{line: 1506, col: 37, offset: 59529},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1506, col: 44, offset: 59536},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1506, col: 51, offset: 59543},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1508, col: 1, offset: 59550},
			expr: &actionExpr{
				pos: position{line: 1508, col: 17, offset: 59566},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 17, offset: 59566},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1508, col: 17, offset: 59566},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1508, col: 28, offset: 59577},
								expr: &ruleRefExpr{
									pos:  position{line: 1508, col: 29, offset: 59578},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 42, offset: 59591},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1508, col: 69, offset: 59618},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1508, col: 78, offset: 59627},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 107, offset: 59656},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1512, col: 1, offset: 59777},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1512, col: 32, offset: 59808},
				expr: &actionExpr{
					pos: position{line: 1512, col: 33, offset: 59809},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1512, col: 33, offset: 59809},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1512, col: 33, offset: 59809},
								expr: &ruleRefExpr{
									pos:  position{line: 1512, col: 34, offset: 59810},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1512, col: 59, offset: 59835},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1512, col: 68, offset: 59844},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1519, col: 1, offset: 60192},
			expr: &seqExpr{
				pos: position{line: 1519, col: 30, offset: 60221},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1519, col: 30, offset: 60221},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1519, col: 37, offset: 60228},
						expr: &ruleRefExpr{
							pos:  position{line: 1519, col: 37, offset: 60228},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1519, col: 44, offset: 60235},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1521, col: 1, offset: 60242},
			expr: &seqExpr{
				pos: position{line: 1521, col: 35, offset: 60276},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1521, col: 35, offset: 60276},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1521, col: 42, offset: 60283},
						expr: &ruleRefExpr{
							pos:  position{line: 1521, col: 42, offset: 60283},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1521, col: 49, offset: 60290},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1523, col: 1, offset: 60297},
			expr: &choiceExpr{
				pos: position{line: 1523, col: 33, offset: 60329},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1523, col: 34, offset: 60330},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1523, col: 34, offset: 60330},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1523, col: 41, offset: 60337},
								expr: &ruleRefExpr{
									pos:  position{line: 1523, col: 41, offset: 60337},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1523, col: 48, offset: 60344},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1523, col: 55, offset: 60351},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1525, col: 1, offset: 60358},
			expr: &actionExpr{
				pos: position{line: 1525, col: 21, offset: 60378},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1525, col: 21, offset: 60378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1525, col: 21, offset: 60378},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1525, col: 32, offset: 60389},
								expr: &ruleRefExpr{
									pos:  position{line: 1525, col: 33, offset: 60390},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1525, col: 46, offset: 60403},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 77, offset: 60434},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1525, col: 86, offset: 60443},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1525, col: 119, offset: 60476},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1529, col: 1, offset: 60605},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1529, col: 36, offset: 60640},
				expr: &actionExpr{
					pos: position{line: 1529, col: 37, offset: 60641},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1529, col: 37, offset: 60641},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1529, col: 37, offset: 60641},
								expr: &ruleRefExpr{
									pos:  position{line: 1529, col: 38, offset: 60642},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1529, col: 67, offset: 60671},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1529, col: 76, offset: 60680},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1537, col: 1, offset: 61034},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1537, col: 23, offset: 61056},
				expr: &ruleRefExpr{
					pos:  position{line: 1537, col: 23, offset: 61056},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1539, col: 1, offset: 61079},
			expr: &actionExpr{
				pos: position{line: 1540, col: 5, offset: 61107},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 5, offset: 61107},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1540, col: 5, offset: 61107},
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 6, offset: 61108},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 10, offset: 61112},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1540, col: 19, offset: 61121},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1540, col: 19, offset: 61121},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1541, col: 15, offset: 61147},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1542, col: 15, offset: 61176},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1543, col: 15, offset: 61203},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1544, col: 15, offset: 61235},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 15, offset: 61269},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1546, col: 15, offset: 61301},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1547, col: 15, offset: 61341},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1548, col: 15, offset: 61371},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1549, col: 15, offset: 61400},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1550, col: 15, offset: 61437},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1551, col: 15, offset: 61468},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1552, col: 15, offset: 61510},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1556, col: 1, offset: 61563},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1556, col: 22, offset: 61584},
				expr: &ruleRefExpr{
					pos:  position{line: 1556, col: 22, offset: 61584},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1558, col: 1, offset: 61606},
			expr: &actionExpr{
				pos: position{line: 1558, col: 22, offset: 61627},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1558, col: 22, offset: 61627},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1558, col: 22, offset: 61627},
							expr: &ruleRefExpr{
								pos:  position{line: 1558, col: 23, offset: 61628},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 27, offset: 61632},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1558, col: 36, offset: 61641},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1558, col: 36, offset: 61641},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1558, col: 48, offset: 61653},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1562, col: 1, offset: 61707},
			expr: &actionExpr{
				pos: position{line: 1562, col: 24, offset: 61730},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1562, col: 24, offset: 61730},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1562, col: 30, offset: 61736},
						expr: &ruleRefExpr{
							pos:  position{line: 1562, col: 31, offset: 61737},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1566, col: 1, offset: 61831},
			expr: &actionExpr{
				pos: position{line: 1566, col: 28, offset: 61858},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 28, offset: 61858},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1566, col: 28, offset: 61858},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1566, col: 37, offset: 61867},
								expr: &ruleRefExpr{
									pos:  position{line: 1566, col: 38, offset: 61868},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 54, offset: 61884},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1573, col: 1, offset: 62133},
			expr: &actionExpr{
				pos: position{line: 1573, col: 10, offset: 62142},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1573, col: 10, offset: 62142},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1573, col: 10, offset: 62142},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1573, col: 21, offset: 62153},
								expr: &ruleRefExpr{
									pos:  position{line: 1573, col: 22, offset: 62154},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1573, col: 35, offset: 62167},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1574, col: 5, offset: 62187},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1574, col: 12, offset: 62194},
								expr: &ruleRefExpr{
									pos:  position{line: 1574, col: 13, offset: 62195},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1575, col: 5, offset: 62218},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1575, col: 11, offset: 62224},
								expr: &ruleRefExpr{
									pos:  position{line: 1575, col: 12, offset: 62225},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1576, col: 6, offset: 62243},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1576, col: 6, offset: 62243},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1576, col: 23, offset: 62260},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1580, col: 1, offset: 62379},
			expr: &seqExpr{
				pos: position{line: 1580, col: 23, offset: 62401},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1580, col: 23, offset: 62401},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1580, col: 27, offset: 62405},
						expr: &ruleRefExpr{
							pos:  position{line: 1580, col: 27, offset: 62405},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1582, col: 1, offset: 62415},
			expr: &seqExpr{
				pos: position{line: 1582, col: 19, offset: 62433},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1582, col: 19, offset: 62433},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1582, col: 26, offset: 62440},
						expr: &ruleRefExpr{
							pos:  position{line: 1582, col: 26, offset: 62440},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1582, col: 33, offset: 62447},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1585, col: 1, offset: 62518},
			expr: &actionExpr{
				pos: position{line: 1585, col: 20, offset: 62537},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1585, col: 20, offset: 62537},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1585, col: 20, offset: 62537},
							expr: &ruleRefExpr{
								pos:  position{line: 1585, col: 21, offset: 62538},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1585, col: 36, offset: 62553},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1585, col: 42, offset: 62559},
								expr: &ruleRefExpr{
									pos:  position{line: 1585, col: 43, offset: 62560},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 55, offset: 62572},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1585, col: 59, offset: 62576},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1589, col: 1, offset: 62648},
			expr: &actionExpr{
				pos: position{line: 1589, col: 14, offset: 62661},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1589, col: 14, offset: 62661},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1589, col: 14, offset: 62661},
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 15, offset: 62662},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1589, col: 30, offset: 62677},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1589, col: 36, offset: 62683},
								expr: &ruleRefExpr{
									pos:  position{line: 1589, col: 37, offset: 62684},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1589, col: 49, offset: 62696},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1589, col: 53, offset: 62700},
							expr: &ruleRefExpr{
								pos:  position{line: 1589, col: 53, offset: 62700},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1593, col: 1, offset: 62773},
			expr: &actionExpr{
				pos: position{line: 1593, col: 14, offset: 62786},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 14, offset: 62786},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1593, col: 14, offset: 62786},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 33, offset: 62805},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1593, col: 42, offset: 62814},
								expr: &seqExpr{
									pos: position{line: 1593, col: 43, offset: 62815},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1593, col: 43, offset: 62815},
											expr: &ruleRefExpr{
												pos:  position{line: 1593, col: 44, offset: 62816},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1593, col: 63, offset: 62835},
											expr: &ruleRefExpr{
												pos:  position{line: 1593, col: 64, offset: 62836},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1593, col: 68, offset: 62840},
											expr: &ruleRefExpr{
												pos:  position{line: 1593, col: 68, offset: 62840},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1593, col: 75, offset: 62847},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1593, col: 89, offset: 62861},
											expr: &ruleRefExpr{
												pos:  position{line: 1593, col: 89, offset: 62861},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1600, col: 1, offset: 63117},
			expr: &seqExpr{
				pos: position{line: 1600, col: 26, offset: 63142},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1600, col: 26, offset: 63142},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1600, col: 33, offset: 63149},
						expr: &ruleRefExpr{
							pos:  position{line: 1600, col: 33, offset: 63149},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1600, col: 40, offset: 63156},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1602, col: 1, offset: 63163},
			expr: &seqExpr{
				pos: position{line: 1602, col: 31, offset: 63193},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1602, col: 31, offset: 63193},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1602, col: 38, offset: 63200},
						expr: &ruleRefExpr{
							pos:  position{line: 1602, col: 38, offset: 63200},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1602, col: 45, offset: 63207},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1604, col: 1, offset: 63214},
			expr: &choiceExpr{
				pos: position{line: 1604, col: 29, offset: 63242},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1604, col: 30, offset: 63243},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1604, col: 30, offset: 63243},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1604, col: 37, offset: 63250},
								expr: &ruleRefExpr{
									pos:  position{line: 1604, col: 37, offset: 63250},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1604, col: 44, offset: 63257},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 51, offset: 63264},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1606, col: 1, offset: 63271},
			expr: &actionExpr{
				pos: position{line: 1606, col: 17, offset: 63287},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1606, col: 17, offset: 63287},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1606, col: 17, offset: 63287},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1606, col: 44, offset: 63314},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1606, col: 53, offset: 63323},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1606, col: 83, offset: 63353},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1610, col: 1, offset: 63467},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1610, col: 32, offset: 63498},
				expr: &actionExpr{
					pos: position{line: 1610, col: 33, offset: 63499},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1610, col: 33, offset: 63499},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1610, col: 33, offset: 63499},
								expr: &ruleRefExpr{
									pos:  position{line: 1610, col: 34, offset: 63500},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1610, col: 59, offset: 63525},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1610, col: 68, offset: 63534},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1614, col: 1, offset: 63679},
			expr: &actionExpr{
				pos: position{line: 1614, col: 22, offset: 63700},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1614, col: 22, offset: 63700},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1614, col: 22, offset: 63700},
							expr: &ruleRefExpr{
								pos:  position{line: 1614, col: 23, offset: 63701},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1614, col: 45, offset: 63723},
							expr: &ruleRefExpr{
								pos:  position{line: 1614, col: 45, offset: 63723},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1614, col: 52, offset: 63730},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1614, col: 57, offset: 63735},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1614, col: 66, offset: 63744},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1614, col: 92, offset: 63770},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1618, col: 1, offset: 63839},
			expr: &actionExpr{
				pos: position{line: 1618, col: 29, offset: 63867},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1618, col: 29, offset: 63867},
					expr: &charClassMatcher{
						pos:        position{line: 1618, col: 29, offset: 63867},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1626, col: 1, offset: 64188},
			expr: &choiceExpr{
				pos: position{line: 1626, col: 17, offset: 64204},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1626, col: 17, offset: 64204},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1626, col: 49, offset: 64236},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1626, col: 78, offset: 64265},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1628, col: 1, offset: 64303},
			expr: &litMatcher{
				pos:        position{line: 1628, col: 26, offset: 64328},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1631, col: 1, offset: 64403},
			expr: &actionExpr{
				pos: position{line: 1631, col: 31, offset: 64433},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1631, col: 31, offset: 64433},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1631, col: 31, offset: 64433},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1631, col: 42, offset: 64444},
								expr: &ruleRefExpr{
									pos:  position{line: 1631, col: 43, offset: 64445},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1631, col: 56, offset: 64458},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1631, col: 63, offset: 64465},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1636, col: 1, offset: 64700},
			expr: &actionExpr{
				pos: position{line: 1637, col: 5, offset: 64741},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 5, offset: 64741},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1637, col: 5, offset: 64741},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1637, col: 16, offset: 64752},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1637, col: 16, offset: 64752},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1637, col: 16, offset: 64752},
											expr: &ruleRefExpr{
												pos:  position{line: 1637, col: 16, offset: 64752},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1637, col: 23, offset: 64759},
											expr: &charClassMatcher{
												pos:        position{line: 1637, col: 23, offset: 64759},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1639, col: 8, offset: 64814},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1640, col: 5, offset: 64878},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1640, col: 16, offset: 64889},
								expr: &actionExpr{
									pos: position{line: 1641, col: 9, offset: 64900},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1641, col: 9, offset: 64900},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1641, col: 9, offset: 64900},
												expr: &ruleRefExpr{
													pos:  position{line: 1641, col: 10, offset: 64901},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1642, col: 9, offset: 64921},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1642, col: 20, offset: 64932},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1642, col: 20, offset: 64932},
														expr: &charClassMatcher{
															pos:        position{line: 1642, col: 20, offset: 64932},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1644, col: 12, offset: 64995},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1651, col: 1, offset: 65232},
			expr: &actionExpr{
				pos: position{line: 1651, col: 39, offset: 65270},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1651, col: 39, offset: 65270},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1651, col: 39, offset: 65270},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1651, col: 50, offset: 65281},
								expr: &ruleRefExpr{
									pos:  position{line: 1651, col: 51, offset: 65282},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1652, col: 9, offset: 65304},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1652, col: 31, offset: 65326},
							expr: &ruleRefExpr{
								pos:  position{line: 1652, col: 31, offset: 65326},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1652, col: 38, offset: 65333},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1652, col: 46, offset: 65341},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1652, col: 53, offset: 65348},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1652, col: 95, offset: 65390},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1652, col: 96, offset: 65391},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1652, col: 96, offset: 65391},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1652, col: 118, offset: 65413},
											expr: &ruleRefExpr{
												pos:  position{line: 1652, col: 118, offset: 65413},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1652, col: 125, offset: 65420},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1652, col: 132, offset: 65427},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1657, col: 1, offset: 65591},
			expr: &actionExpr{
				pos: position{line: 1657, col: 44, offset: 65634},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1657, col: 44, offset: 65634},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1657, col: 50, offset: 65640},
						expr: &ruleRefExpr{
							pos:  position{line: 1657, col: 51, offset: 65641},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1661, col: 1, offset: 65729},
			expr: &actionExpr{
				pos: position{line: 1662, col: 5, offset: 65785},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1662, col: 5, offset: 65785},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1662, col: 5, offset: 65785},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1662, col: 11, offset: 65791},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1662, col: 11, offset: 65791},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1662, col: 11, offset: 65791},
											expr: &ruleRefExpr{
												pos:  position{line: 1662, col: 12, offset: 65792},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1662, col: 34, offset: 65814},
											expr: &charClassMatcher{
												pos:        position{line: 1662, col: 34, offset: 65814},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 8, offset: 65869},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1669, col: 1, offset: 66000},
			expr: &actionExpr{
				pos: position{line: 1670, col: 5, offset: 66039},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1670, col: 5, offset: 66039},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1670, col: 5, offset: 66039},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1670, col: 16, offset: 66050},
								expr: &ruleRefExpr{
									pos:  position{line: 1670, col: 17, offset: 66051},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1671, col: 5, offset: 66069},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 5, offset: 66283},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1678, col: 12, offset: 66290},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1682, col: 1, offset: 66444},
			expr: &actionExpr{
				pos: position{line: 1682, col: 16, offset: 66459},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1682, col: 16, offset: 66459},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1687, col: 1, offset: 66547},
			expr: &actionExpr{
				pos: position{line: 1687, col: 39, offset: 66585},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1687, col: 39, offset: 66585},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1687, col: 45, offset: 66591},
						expr: &ruleRefExpr{
							pos:  position{line: 1687, col: 46, offset: 66592},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1691, col: 1, offset: 66676},
			expr: &actionExpr{
				pos: position{line: 1691, col: 38, offset: 66713},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1691, col: 38, offset: 66713},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1691, col: 38, offset: 66713},
							expr: &ruleRefExpr{
								pos:  position{line: 1691, col: 39, offset: 66714},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 49, offset: 66724},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1691, col: 58, offset: 66733},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1691, col: 58, offset: 66733},
									expr: &charClassMatcher{
										pos:        position{line: 1691, col: 58, offset: 66733},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1693, col: 4, offset: 66780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1700, col: 1, offset: 66973},
			expr: &actionExpr{
				pos: position{line: 1700, col: 14, offset: 66986},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1700, col: 14, offset: 66986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1700, col: 14, offset: 66986},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1700, col: 19, offset: 66991},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1700, col: 25, offset: 66997},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1700, col: 43, offset: 67015},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1704, col: 1, offset: 67084},
			expr: &actionExpr{
				pos: position{line: 1704, col: 21, offset: 67104},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1704, col: 21, offset: 67104},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1704, col: 30, offset: 67113},
						expr: &choiceExpr{
							pos: position{line: 1704, col: 31, offset: 67114},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1704, col: 31, offset: 67114},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1704, col: 38, offset: 67121},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1704, col: 51, offset: 67134},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1704, col: 59, offset: 67142},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1704, col: 60, offset: 67143},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1704, col: 60, offset: 67143},
												expr: &litMatcher{
													pos:        position{line: 1704, col: 61, offset: 67144},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1704, col: 66, offset: 67149,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1710, col: 1, offset: 67261},
			expr: &actionExpr{
				pos: position{line: 1710, col: 23, offset: 67283},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1710, col: 23, offset: 67283},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1710, col: 23, offset: 67283},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1710, col: 29, offset: 67289},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1710, col: 36, offset: 67296},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1711, col: 5, offset: 67329},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1711, col: 11, offset: 67335},
								expr: &actionExpr{
									pos: position{line: 1711, col: 12, offset: 67336},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1711, col: 12, offset: 67336},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1711, col: 12, offset: 67336},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 12, offset: 67336},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1711, col: 19, offset: 67343},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1711, col: 23, offset: 67347},
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 23, offset: 67347},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1711, col: 30, offset: 67354},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1711, col: 39, offset: 67363},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 5, offset: 67422},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1712, col: 11, offset: 67428},
								expr: &actionExpr{
									pos: position{line: 1712, col: 12, offset: 67429},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1712, col: 12, offset: 67429},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1712, col: 12, offset: 67429},
												expr: &ruleRefExpr{
													pos:  position{line: 1712, col: 12, offset: 67429},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1712, col: 19, offset: 67436},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1712, col: 23, offset: 67440},
												expr: &ruleRefExpr{
													pos:  position{line: 1712, col: 23, offset: 67440},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1712, col: 30, offset: 67447},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1712, col: 39, offset: 67456},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1713, col: 5, offset: 67515},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1717, col: 1, offset: 67598},
			expr: &actionExpr{
				pos: position{line: 1717, col: 30, offset: 67627},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1717, col: 30, offset: 67627},
					expr: &choiceExpr{
						pos: position{line: 1717, col: 31, offset: 67628},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1717, col: 31, offset: 67628},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1717, col: 42, offset: 67639},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1724, col: 1, offset: 67795},
			expr: &actionExpr{
				pos: position{line: 1724, col: 14, offset: 67808},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1724, col: 14, offset: 67808},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1724, col: 14, offset: 67808},
							expr: &ruleRefExpr{
								pos:  position{line: 1724, col: 15, offset: 67809},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1724, col: 19, offset: 67813},
							expr: &ruleRefExpr{
								pos:  position{line: 1724, col: 19, offset: 67813},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1724, col: 26, offset: 67820},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1731, col: 1, offset: 67974},
			expr: &charClassMatcher{
				pos:        position{line: 1731, col: 13, offset: 67986},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1733, col: 1, offset: 67998},
			expr: &choiceExpr{
				pos: position{line: 1733, col: 16, offset: 68013},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1733, col: 16, offset: 68013},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1733, col: 22, offset: 68019},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1733, col: 28, offset: 68025},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1733, col: 34, offset: 68031},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1733, col: 40, offset: 68037},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1733, col: 46, offset: 68043},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1735, col: 1, offset: 68051},
			expr: &actionExpr{
				pos: position{line: 1735, col: 14, offset: 68064},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1735, col: 14, offset: 68064},
					expr: &charClassMatcher{
						pos:        position{line: 1735, col: 14, offset: 68064},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1739, col: 1, offset: 68114},
			expr: &choiceExpr{
				pos: position{line: 1743, col: 5, offset: 68445},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1743, col: 5, offset: 68445},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1743, col: 5, offset: 68445},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1743, col: 5, offset: 68445},
									expr: &charClassMatcher{
										pos:        position{line: 1743, col: 5, offset: 68445},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1743, col: 15, offset: 68455},
									expr: &choiceExpr{
										pos: position{line: 1743, col: 17, offset: 68457},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1743, col: 17, offset: 68457},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1743, col: 30, offset: 68470},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1745, col: 9, offset: 68542},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1745, col: 9, offset: 68542},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1745, col: 9, offset: 68542},
									expr: &charClassMatcher{
										pos:        position{line: 1745, col: 9, offset: 68542},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1745, col: 19, offset: 68552},
									expr: &seqExpr{
										pos: position{line: 1745, col: 20, offset: 68553},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1745, col: 20, offset: 68553},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1745, col: 27, offset: 68560},
												expr: &charClassMatcher{
													pos:        position{line: 1745, col: 27, offset: 68560},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1749, col: 1, offset: 68640},
			expr: &choiceExpr{
				pos: position{line: 1750, col: 5, offset: 68722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1750, col: 5, offset: 68722},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1750, col: 5, offset: 68722},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1750, col: 5, offset: 68722},
									expr: &charClassMatcher{
										pos:        position{line: 1750, col: 5, offset: 68722},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1750, col: 20, offset: 68737},
									expr: &choiceExpr{
										pos: position{line: 1750, col: 22, offset: 68739},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1750, col: 22, offset: 68739},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1750, col: 32, offset: 68749},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1752, col: 9, offset: 68821},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1755, col: 1, offset: 68924},
			expr: &actionExpr{
				pos: position{line: 1755, col: 12, offset: 68935},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1755, col: 12, offset: 68935},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1759, col: 1, offset: 69004},
			expr: &actionExpr{
				pos: position{line: 1759, col: 17, offset: 69020},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1759, col: 17, offset: 69020},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1759, col: 22, offset: 69025},
						expr: &choiceExpr{
							pos: position{line: 1759, col: 23, offset: 69026},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1759, col: 23, offset: 69026},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1759, col: 34, offset: 69037},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1763, col: 1, offset: 69125},
			expr: &actionExpr{
				pos: position{line: 1763, col: 25, offset: 69149},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1763, col: 25, offset: 69149},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1763, col: 30, offset: 69154},
						expr: &charClassMatcher{
							pos:        position{line: 1763, col: 31, offset: 69155},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1767, col: 1, offset: 69231},
			expr: &actionExpr{
				pos: position{line: 1767, col: 13, offset: 69243},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1767, col: 13, offset: 69243},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1767, col: 13, offset: 69243},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1767, col: 20, offset: 69250},
								expr: &ruleRefExpr{
									pos:  position{line: 1767, col: 21, offset: 69251},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1767, col: 34, offset: 69264},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1767, col: 39, offset: 69269},
								expr: &choiceExpr{
									pos: position{line: 1767, col: 40, offset: 69270},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1767, col: 40, offset: 69270},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1767, col: 51, offset: 69281},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1771, col: 1, offset: 69373},
			expr: &actionExpr{
				pos: position{line: 1771, col: 23, offset: 69395},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 23, offset: 69395},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1771, col: 23, offset: 69395},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1771, col: 31, offset: 69403},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 43, offset: 69415},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1771, col: 48, offset: 69420},
								expr: &choiceExpr{
									pos: position{line: 1771, col: 49, offset: 69421},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1771, col: 49, offset: 69421},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1771, col: 60, offset: 69432},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1775, col: 1, offset: 69524},
			expr: &oneOrMoreExpr{
				pos: position{line: 1775, col: 13, offset: 69536},
				expr: &charClassMatcher{
					pos:        position{line: 1775, col: 14, offset: 69537},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1777, col: 1, offset: 69673},
			expr: &actionExpr{
				pos: position{line: 1777, col: 21, offset: 69693},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 21, offset: 69693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1777, col: 21, offset: 69693},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 29, offset: 69701},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1777, col: 41, offset: 69713},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 47, offset: 69719},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1782, col: 1, offset: 69972},
			expr: &oneOrMoreExpr{
				pos: position{line: 1782, col: 22, offset: 69993},
				expr: &charClassMatcher{
					pos:        position{line: 1782, col: 23, offset: 69994},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1784, col: 1, offset: 70128},
			expr: &actionExpr{
				pos: position{line: 1784, col: 9, offset: 70136},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1784, col: 9, offset: 70136},
					expr: &charClassMatcher{
						pos:        position{line: 1784, col: 9, offset: 70136},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1788, col: 1, offset: 70188},
			expr: &choiceExpr{
				pos: position{line: 1788, col: 15, offset: 70202},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1788, col: 15, offset: 70202},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 27, offset: 70214},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 40, offset: 70227},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 51, offset: 70238},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1788, col: 62, offset: 70249},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1790, col: 1, offset: 70262},
			expr: &actionExpr{
				pos: position{line: 1790, col: 7, offset: 70268},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1790, col: 7, offset: 70268},
					expr: &charClassMatcher{
						pos:        position{line: 1790, col: 7, offset: 70268},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1794, col: 1, offset: 70397},
			expr: &actionExpr{
				pos: position{line: 1794, col: 10, offset: 70406},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1794, col: 10, offset: 70406},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1798, col: 1, offset: 70452},
			expr: &actionExpr{
				pos: position{line: 1798, col: 11, offset: 70462},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 11, offset: 70462},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1798, col: 11, offset: 70462},
							expr: &litMatcher{
								pos:        position{line: 1798, col: 11, offset: 70462},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1798, col: 16, offset: 70467},
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 16, offset: 70467},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1802, col: 1, offset: 70523},
			expr: &choiceExpr{
				pos: position{line: 1802, col: 10, offset: 70532},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1802, col: 10, offset: 70532},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1802, col: 16, offset: 70538},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1802, col: 16, offset: 70538},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1806, col: 1, offset: 70583},
			expr: &choiceExpr{
				pos: position{line: 1806, col: 12, offset: 70594},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1806, col: 12, offset: 70594},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1806, col: 21, offset: 70603},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1806, col: 28, offset: 70610},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1808, col: 1, offset: 70618},
			expr: &notExpr{
				pos: position{line: 1808, col: 8, offset: 70625},
				expr: &anyMatcher{
					line: 1808, col: 9, offset: 70626,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1810, col: 1, offset: 70631},
			expr: &choiceExpr{
				pos: position{line: 1810, col: 8, offset: 70638},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1810, col: 8, offset: 70638},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1810, col: 18, offset: 70648},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {

	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRoleWord1() (interface{}, error) {

	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1()
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {

	return []interface{}{types.Attributes{"role": role}}, nil
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole1() (interface{}, error) {

	return types.NewElementRole(string(c.text[1:]))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1()
}

func (c *current) onQuotedTextShortID1() (interface{}, error) {

	return types.NewElementID(string(c.text[1:]))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText19(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText19(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
